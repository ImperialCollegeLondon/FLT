import FLT.AutomorphicForm.QuaternionAlgebra.Defs
import Mathlib.NumberTheory.NumberField.InfinitePlace.TotallyRealComplex
import Mathlib.Data.Set.Finite.Basic
import FLT.DivisionAlgebra.Finiteness

namespace TotallyDefiniteQuaternionAlgebra

open IsDedekindDomain NumberField IsQuaternionAlgebra
open scoped TensorProduct TensorProduct.RightActions

-- let F be a number field
variable {F : Type*} [Field F] [NumberField F]
    -- and let D be a totally definite quaternion algebra over F
    -- TODO the assumption that D is totally definite implies that
    -- D is a division ring, so we should be able to remove the
    -- [DivisionRing D] requirement.
    {D : Type*} [DivisionRing D] [Algebra F D] [IsQuaternionAlgebra F D]
    (hD : IsTotallyDefinite F D)
-- Let K be a coefficient field
variable (K : Type*) [Field K]
    -- and let U, the level, be a (compact) open subgroup of `(D ‚äó ùî∏_F^‚àû)À£`
    (U : Subgroup (Dfx (F:=F) (D:=D)))
    (hU : IsOpen (U : Set (Dfx (F:=F) (D:=D))))

open TotallyDefiniteQuaternionAlgebra


-- Then the space of K-valued weight 2 level U modular forms for DÀ£ is finite-dimensional over K.
/-- The space of `K`-valued weight 2 level `U` quaternionic automorphic forms
for `DÀ£` is finite-dimensional over `K`.
-/
theorem WeightTwoAutomorphicForm.finiteDimensional
    {hU : IsOpen (U : Set (Dfx (F:=F) (D:=D)))} :
    FiniteDimensional K (WeightTwoAutomorphicFormOfLevel U K) := by
    let U' : Subgroup (Dfx F D) := U
    let H' : Subgroup (Dfx F D) := {
        carrier := Set.range (incl‚ÇÅ F D),
        one_mem' := ‚ü®1, by simp‚ü©,
        mul_mem' := by
            rintro _ _ ‚ü®a, rfl‚ü© ‚ü®b, rfl‚ü©
            exact ‚ü®a * b, by simp‚ü©,
        inv_mem' := by
            rintro _ ‚ü®a, rfl‚ü©
            exact ‚ü®a‚Åª¬π, by simp‚ü©
    }
    -- We define a free K-module W with a basis indexed by
    -- the elements of a double coset space which (in the totally
    -- definite case) is finite)
    let X := Doset.Quotient (Set.range (incl‚ÇÅ F D)) U'
    have h : Finite X :=
        NumberField.FiniteAdeleRing.DivisionAlgebra.finiteDoubleCoset (K:=F) (D:=D) hU

    letI := Fintype.ofFinite X
    let m := Fintype.card X
    let W := Fin m ‚Üí K
    let V := (WeightTwoAutomorphicFormOfLevel U K)

    let index := (Fintype.equivFin X : X ‚âÉ Fin m)
    let rep : X ‚Üí Dfx F D := Quot.out

    -- We then define a linear map œÜ from V to the finite-dimensional space W.
    -- V is a space of functions, and the map consists of evaluating
    -- a function on representatives given by the rep function above.
    let œÜ : V ‚Üí‚Çó[K] W :=
        {
        toFun := fun v i ‚Ü¶ v.1.toFun (rep (index.symm i)),
        map_add' := by
            intros v‚ÇÅ v‚ÇÇ
            ext i
            rfl
        map_smul' := by
            intros c v
            ext i
            rfl
        }
    -- Since we have a linear map œÜ from V to W and W is finite-dimensional,
    -- it's enough to check that œÜ is injective.
    have œÜ_injective : Function.Injective œÜ := by
        intro v‚ÇÅ v‚ÇÇ h
        let f‚ÇÅ : WeightTwoAutomorphicForm F D K := v‚ÇÅ.1
        let f‚ÇÇ : WeightTwoAutomorphicForm F D K := v‚ÇÇ.1
        -- Show v‚ÇÅ.toFun = v‚ÇÇ.toFun because they agree on reps and the
        -- space is determined by those values
        have fun_eq : ‚àÄ d, f‚ÇÅ.toFun d = f‚ÇÇ.toFun d := by
            intro d
            let d' := rep (Quot.mk _ d)
            -- Because d' is a representative for the double coset containing d
            have hcoset : ‚àÉ Œ≥ : DÀ£, ‚àÉ u ‚àà U, d = (incl‚ÇÅ F D Œ≥) * d' * u := by
                have h_rel : (Doset.setoid H' U') d' d := by
                  exact Quotient.exact (Quotient.out_eq ‚ü¶d‚üß)
                -- Apply Doset.rel_iff to extract the witnesses
                rw [Doset.rel_iff] at h_rel
                obtain ‚ü®h, hh, k, hk, h_eq‚ü© := h_rel
                obtain ‚ü®Œ≥, hŒ≥‚ü© := hh
                use Œ≥, k, hk
                rw [‚Üê hŒ≥] at h_eq
                exact h_eq
            obtain ‚ü®Œ≥, u, hu, hd‚ü© := hcoset
            have h1 : f‚ÇÅ.toFun d = f‚ÇÅ.toFun d' := by
                -- Using the left-invariance of automorphic forms.
                rw [hd, mul_assoc, f‚ÇÅ.left_invt Œ≥ (d' * u)]
                -- An automorphic form of level U, in the totally definite
                -- setting, is right-invariant under U by definition.
                exact congr_fun
                    (congr_arg WeightTwoAutomorphicForm.toFun (v‚ÇÅ.prop ‚ü®u, hu‚ü©)) d'
            -- Same as h1, TODO maybe should factor to reduce code duplication
            have h2 : f‚ÇÇ.toFun d = f‚ÇÇ.toFun d' := by
                rw [hd, mul_assoc, f‚ÇÇ.left_invt Œ≥ (d' * u)]
                exact congr_fun
                    (congr_arg WeightTwoAutomorphicForm.toFun (v‚ÇÇ.prop ‚ü®u, hu‚ü©)) d'
            rw [h1, h2]
            have : ‚àÉ i, d' = rep (index.symm i) := by
                use index (Quot.mk _ d)
                simp only [Equiv.symm_apply_apply]
                exact rfl
            obtain ‚ü®i, d'_rep‚ü© := this
            rw [d'_rep]
            exact congr_fun h i
        have inner_eq : f‚ÇÅ = f‚ÇÇ := WeightTwoAutomorphicForm.ext (f‚ÇÅ) (f‚ÇÇ) fun_eq
        apply Subtype.ext
        exact inner_eq
    exact FiniteDimensional.of_injective œÜ œÜ_injective

end TotallyDefiniteQuaternionAlgebra
