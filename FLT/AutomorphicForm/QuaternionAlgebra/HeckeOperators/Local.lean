/-
Copyright (c) 2025 Kevin Buzzard. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kevin Buzzard, Bryan Wang
-/
import FLT.AutomorphicForm.QuaternionAlgebra.HeckeOperators.Abstract -- abstract Hecke ops
import FLT.AutomorphicForm.QuaternionAlgebra.Defs -- definitions of automorphic forms
import FLT.QuaternionAlgebra.NumberField -- rigidifications of quat algs
import FLT.DedekindDomain.FiniteAdeleRing.LocalUnits -- for (œÄ 0; 0 1)
import Mathlib.Data.Matrix.Reflection

open NumberField IsQuaternionAlgebra.NumberField IsDedekindDomain
open TotallyDefiniteQuaternionAlgebra
open IsDedekindDomain.HeightOneSpectrum
open scoped TensorProduct
open scoped Pointwise

namespace TotallyDefiniteQuaternionAlgebra.WeightTwoAutomorphicForm.HeckeOperator

-- let F be a (totally real) number field
variable {F : Type*} [Field F] [NumberField F]

namespace Local

variable {v : HeightOneSpectrum (ùìû F)}

variable (Œ± : v.adicCompletionIntegers F)

variable (hŒ± : Œ± ‚â† 0)

-- Not sure if this could be somewhere else.
variable (v) {Œ± hŒ±} in
lemma valuation_lt_one_iff_mem_maximalIdeal {t : adicCompletionIntegers F v} :
    Valued.v (t : adicCompletion F v) < 1
    ‚Üî t ‚àà IsLocalRing.maximalIdeal (adicCompletionIntegers F v) :=
  Iff.trans
  (Valuation.isEquiv_iff_val_lt_one.mp
    (Valuation.isEquiv_valuation_valuationSubring Valued.v))
  (ValuationSubring.valuation_lt_one_iff (adicCompletionIntegers F v) _).symm

variable (v) {Œ± hŒ±} in
/-- The subgroup `U1 v = GL2.localTameLevel v`. -/
noncomputable abbrev U1 : Subgroup (GL (Fin 2) (adicCompletion F v)) := (GL2.localTameLevel v)

/- Some lemmas in this section could be placed somewhere else in greater generality. -/
namespace GL2

/-- The matrix element `diag[Œ±, 1]`. -/
noncomputable abbrev diag : (GL (Fin 2) (adicCompletion F v)) :=
  Matrix.GeneralLinearGroup.diagonal (![‚ü®(Œ± : v.adicCompletion F),
    (Œ± : v.adicCompletion F)‚Åª¬π, by
      rw [mul_inv_cancel‚ÇÄ]
      exact_mod_cast hŒ±, by
      rw [inv_mul_cancel‚ÇÄ]
      exact_mod_cast hŒ±‚ü©, 1])

lemma diag_def :
    (diag Œ± hŒ± : Matrix (Fin 2) (Fin 2) (adicCompletion F v))
    = !![‚ÜëŒ±, 0; 0, 1] := by
  rw[diag, Matrix.GeneralLinearGroup.diagonal]
  ext i j; fin_cases i; all_goals fin_cases j
  all_goals simp

lemma conjBy_diag {a b c d : adicCompletion F v} :
    (diag Œ± hŒ±)‚Åª¬π * !![a, b; c, d] * diag Œ± hŒ±
    = !![a, (Œ± : v.adicCompletion F)‚Åª¬π * b; c * Œ±, d] := by
  simp only [Matrix.coe_units_inv, diag_def, Matrix.inv_def, Matrix.det_fin_two_of, mul_one,
    mul_zero, sub_zero, Ring.inverse_eq_inv', Matrix.adjugate_fin_two_of, neg_zero, Matrix.smul_of,
    Matrix.smul_cons, smul_eq_mul, Matrix.smul_empty, Matrix.cons_mul, Nat.succ_eq_add_one,
    Nat.reduceAdd, Matrix.vecMul_cons, Matrix.head_cons, Matrix.tail_cons, zero_smul,
    Matrix.empty_vecMul, add_zero, zero_add, Matrix.empty_mul, Equiv.symm_apply_apply,
    Matrix.add_cons, Matrix.empty_add_empty, EmbeddingLike.apply_eq_iff_eq]
  rw[inv_mul_cancel‚ÇÄ ((Subtype.coe_ne_coe).mpr hŒ±), one_mul, one_mul]
  ring_nf; rw[mul_inv_cancel‚ÇÄ ((Subtype.coe_ne_coe).mpr hŒ±), one_mul]

/-- The unipotent matrix element `!![1, t; 0, 1]`. -/
noncomputable def unipotent (t : v.adicCompletion F) : (GL (Fin 2) (adicCompletion F v)) :=
  letI detInv : Invertible !![1, t; 0, 1].det :=
  { invOf := 1,
    invOf_mul_self :=
      by simp only [Matrix.det_fin_two_of, mul_one, mul_zero, sub_zero],
    mul_invOf_self :=
      by simp only [Matrix.det_fin_two_of, mul_one, mul_zero, sub_zero] }
  Matrix.unitOfDetInvertible !![1, t; 0, 1]

lemma unipotent_def (t : v.adicCompletion F) :
    (unipotent t : Matrix (Fin 2) (Fin 2) (adicCompletion F v))
    = !![1, t; 0, 1] := by
  rw[unipotent]; rfl

lemma unipotent_inv (t : v.adicCompletion F) :
    (unipotent t)‚Åª¬π = unipotent (-t) := by
  ext; simp [unipotent_def, Matrix.inv_def]

lemma unipotent_mul (t‚ÇÅ t‚ÇÇ : v.adicCompletion F) :
    (unipotent t‚ÇÇ) * (unipotent t‚ÇÅ) = unipotent (t‚ÇÅ + t‚ÇÇ) := by
  ext i j; fin_cases i; all_goals fin_cases j
  all_goals simp [unipotent_def]

-- Show that `unipotent t` is in `U1 v` for `t ‚àà O_v`.
lemma unipotent_mem_U1 (t : v.adicCompletionIntegers F) :
    unipotent ‚Üët ‚àà (U1 v) := by
  unfold unipotent
  constructor
  ¬∑ apply GL2.mem_localFullLevel_iff_v_le_one_and_v_det_eq_one.mpr
    constructor
    ¬∑ intro i j
      fin_cases i; all_goals fin_cases j
      all_goals simp only [Matrix.unitOfDetInvertible, Fin.mk_one, Fin.isValue, Fin.zero_eta,
        val_unitOfInvertible, Matrix.of_apply, Matrix.cons_val', Matrix.cons_val_zero,
        Matrix.cons_val_fin_one, Matrix.cons_val_one, map_zero, zero_le', map_one, le_refl]
      apply (mem_adicCompletionIntegers _ _ _).mp
      simp
    simp [Matrix.unitOfDetInvertible]
  simp [Matrix.unitOfDetInvertible]

/-- The matrix element `(unipotent t) * (diag Œ± hŒ±) = !![Œ±, t; 0, 1]`. -/
noncomputable def unipotent_mul_diag (t : v.adicCompletionIntegers F) :
    (GL (Fin 2) (adicCompletion F v)) :=
  (unipotent (t : adicCompletion F v)) * (diag Œ± hŒ±)

lemma unipotent_mul_diag_inv_mul_unipotent_mul_diag (t‚ÇÅ t‚ÇÇ : v.adicCompletionIntegers F) :
    (unipotent_mul_diag Œ± hŒ± t‚ÇÅ)‚Åª¬π * unipotent_mul_diag Œ± hŒ± t‚ÇÇ
    = unipotent ((Œ± : v.adicCompletion F)‚Åª¬π * ((t‚ÇÇ + -t‚ÇÅ) : adicCompletion F v )) := by
  ext i j
  push_cast [unipotent_mul_diag, mul_inv_rev, unipotent_inv]
  rw [‚Üê mul_assoc]; nth_rw 2 [mul_assoc]
  rw_mod_cast [unipotent_mul]; push_cast [unipotent_def]
  rw_mod_cast [conjBy_diag]
  fin_cases i; all_goals fin_cases j
  all_goals simp

end GL2

open GL2

namespace U1

variable {Œ± hŒ±}

variable {x : GL (Fin 2) (adicCompletion F v)}

variable (hx : x ‚àà (U1 v))
include hx

lemma apply_mem_integer (i j : Fin 2) :
    (x i j) ‚àà (adicCompletionIntegers F v) :=
  GL2.v_le_one_of_mem_localFullLevel _ hx.left _ _

lemma apply_zero_zero_sub_apply_one_one_mem_maximalIdeal :
    (‚ü®(x 0 0), apply_mem_integer hx _ _‚ü© - ‚ü®(x 1 1), apply_mem_integer hx _ _‚ü©)
    ‚àà IsLocalRing.maximalIdeal (adicCompletionIntegers F v) :=
  (valuation_lt_one_iff_mem_maximalIdeal v).mp hx.right.left

lemma apply_one_zero_mem_maximalIdeal :
    ‚ü®(x 1 0), apply_mem_integer hx _ _‚ü©
    ‚àà IsLocalRing.maximalIdeal (adicCompletionIntegers F v) :=
  (valuation_lt_one_iff_mem_maximalIdeal v).mp hx.right.right

lemma apply_one_one_notMem_maximalIdeal :
    ‚ü®(x 1 1), apply_mem_integer hx _ _‚ü©
    ‚àâ IsLocalRing.maximalIdeal (adicCompletionIntegers F v) := by
  by_contra mem_maximalIdeal
  have det_mem_maximalIdeal :
      ‚ü®(x 0 0), apply_mem_integer hx _ _‚ü© * ‚ü®(x 1 1), apply_mem_integer hx _ _‚ü©
      - ‚ü®(x 0 1), apply_mem_integer hx _ _‚ü© * ‚ü®(x 1 0), apply_mem_integer hx _ _‚ü©
      ‚àà IsLocalRing.maximalIdeal (adicCompletionIntegers F v) :=
    Ideal.sub_mem _
      (Ideal.mul_mem_left _ _ mem_maximalIdeal)
      (Ideal.mul_mem_left _ _ (apply_one_zero_mem_maximalIdeal hx))
  have v_det_lt_one :=
    ((valuation_lt_one_iff_mem_maximalIdeal _).mpr det_mem_maximalIdeal)
  push_cast at v_det_lt_one; rw[‚Üê Matrix.det_fin_two] at v_det_lt_one
  exact (ne_of_lt v_det_lt_one) (GL2.v_det_val_mem_localFullLevel_eq_one hx.left)

lemma isUnit_apply_one_one :
    IsUnit (‚ü®(x 1 1), apply_mem_integer hx _ _‚ü© : adicCompletionIntegers F v) :=
  (IsLocalRing.notMem_maximalIdeal.mp (apply_one_one_notMem_maximalIdeal hx))

lemma conjBy_diag_mem_U1_iff_apply_zero_one_mem_ideal :
    (diag Œ± hŒ±)‚Åª¬π * x * diag Œ± hŒ± ‚àà U1 v
    ‚Üî ‚ü®(x 0 1), apply_mem_integer hx _ _‚ü© ‚àà (Ideal.span {Œ±}) := by
  let a : (adicCompletionIntegers F v) := ‚ü® _ , apply_mem_integer hx 0 0 ‚ü©
  let b : (adicCompletionIntegers F v) := ‚ü® _ , apply_mem_integer hx 0 1 ‚ü©
  let c : (adicCompletionIntegers F v) := ‚ü® _ , apply_mem_integer hx 1 0 ‚ü©
  let d : (adicCompletionIntegers F v) := ‚ü® _ , apply_mem_integer hx 1 1 ‚ü©
  have hx‚ÇÅ : x = !![(a : adicCompletion F v), b; c, d] :=
    (Matrix.etaExpand_eq (x : Matrix (Fin 2) (Fin 2) (adicCompletion F v))).symm

  constructor
  ¬∑ /- If `(diag Œ± hŒ±)‚Åª¬π * x * diag Œ± hŒ± ‚àà U1 v`,
    then we have `((diag Œ± hŒ±)‚Åª¬π * x * diag Œ± hŒ±) 0 1 ‚àà adicCompletionIntegers F v`,
    which after computing `(diag Œ± hŒ±)‚Åª¬π * x * diag Œ± hŒ±` gives the desired. -/
    intro h; have h‚ÇÅ := apply_mem_integer h 0 1
    push_cast [hx‚ÇÅ] at h‚ÇÅ; rw_mod_cast [conjBy_diag] at h‚ÇÅ
    simp only [Fin.isValue, Matrix.of_apply, Matrix.cons_val', Matrix.cons_val_one,
      Matrix.cons_val_fin_one, Matrix.cons_val_zero] at h‚ÇÅ
    apply Ideal.mem_span_singleton'.mpr
    use ‚ü® _ , h‚ÇÅ ‚ü©
    apply (Subtype.coe_inj).mp; push_cast
    ring_nf; rw[mul_inv_cancel‚ÇÄ ((Subtype.coe_ne_coe).mpr hŒ±), one_mul]

  /- Conversely, we show that `(diag Œ± hŒ±)‚Åª¬π * x * diag Œ± hŒ± ‚àà U1 v`. -/
  intro h; obtain ‚ü® q, hq ‚ü© := Ideal.mem_span_singleton'.mp h
  constructor
  /- We first show that `(diag Œ± hŒ±)‚Åª¬π * x * diag Œ± hŒ±` is in `GL_2(O_v)`. -/
  ¬∑ apply GL2.mem_localFullLevel_iff_v_le_one_and_v_det_eq_one.mpr
    push_cast [hx‚ÇÅ]; rw_mod_cast [conjBy_diag]
    constructor
    ¬∑ intro i j; fin_cases i; all_goals fin_cases j
      all_goals simp only [Fin.zero_eta, Fin.isValue, Matrix.of_apply, Matrix.cons_val',
        Matrix.cons_val_zero, Matrix.cons_val_fin_one,
        Fin.mk_one, Fin.isValue, Matrix.cons_val_one, Matrix.cons_val_fin_one]
      ¬∑ exact apply_mem_integer hx 0 0
      ¬∑ unfold b; rw[‚Üê hq]; push_cast; ring_nf
        rw[mul_inv_cancel‚ÇÄ ((Subtype.coe_ne_coe).mpr hŒ±), one_mul]
        apply (mem_adicCompletionIntegers _ _ _).mp
        simp
      ¬∑ exact_mod_cast le_of_lt
          ((valuation_lt_one_iff_mem_maximalIdeal v).mpr
          (Ideal.mul_mem_right _ _ (apply_one_zero_mem_maximalIdeal hx)))
      exact apply_mem_integer hx 1 1
    rw[Matrix.det_fin_two_of]; ring_nf
    rw[mul_inv_cancel‚ÇÄ ((Subtype.coe_ne_coe).mpr hŒ±), one_mul]
    rw[‚Üê Matrix.det_fin_two]
    exact GL2.v_det_val_mem_localFullLevel_eq_one hx.left
  /- Finally we show that `(diag Œ± hŒ±)‚Åª¬π * x * diag Œ± hŒ±`
  is in `GL2.localTameLevel`. -/
  push_cast [hx‚ÇÅ]; rw_mod_cast [conjBy_diag]
  simp only [Fin.isValue, Matrix.of_apply, Matrix.cons_val', Matrix.cons_val_zero,
    Matrix.cons_val_fin_one, Matrix.cons_val_one]
  norm_cast
  exact ‚ü® hx.right.left ,
    (valuation_lt_one_iff_mem_maximalIdeal v).mpr
    (Ideal.mul_mem_right _ _ (apply_one_zero_mem_maximalIdeal hx)) ‚ü©

end U1

open U1

section CosetDecomposition

variable (v) in
/-- The double coset space `U1 diag U1` as a set of left cosets. -/
noncomputable def U1diagU1 :
    Set ((GL (Fin 2) (adicCompletion F v)) ‚ß∏ (U1 v)) :=
  (QuotientGroup.mk '' ((U1 v) * {diag Œ± hŒ±}))

variable (v) in
/-- For each `t ‚àà O_v / Œ±O_v`, the left coset `unipotent_mul_diag U1`
for a lift of t to `O_v`. -/
noncomputable def unipotent_mul_diagU1
    (t : ‚Üë(adicCompletionIntegers F v) ‚ß∏ (Ideal.span {Œ±})) :
    ((GL (Fin 2) (adicCompletion F v)) ‚ß∏ ‚Üë(U1 v)) :=
  QuotientGroup.mk (unipotent_mul_diag Œ± hŒ± (Quotient.out t : adicCompletionIntegers F v))

/-- `unipotent_mul_diagU1` is contained in `U1diagU1` for all t. -/
lemma mapsTo_unipotent_mul_diagU1_U1diagU1 :
    Set.MapsTo (unipotent_mul_diagU1 v Œ± hŒ±) ‚ä§ (U1diagU1 v Œ± hŒ±) :=
  (fun t _ => Set.mem_image_of_mem QuotientGroup.mk
    (Set.mul_mem_mul (unipotent_mem_U1 (Quotient.out t)) rfl))

/-- Distinct t give distinct `unipotent_mul_diagU1`, i.e. we have a disjoint union. -/
lemma injOn_unipotent_mul_diagU1 :
    Set.InjOn (unipotent_mul_diagU1 v Œ± hŒ±) ‚ä§ := by
  intro t‚ÇÅ h‚ÇÅ t‚ÇÇ h‚ÇÇ h
  -- If `unipotent_mul_diagU1 t‚ÇÅ = unipotent_mul_diagU1 t‚ÇÇ`,
  -- then `(unipotent_mul_diag t‚ÇÅ)‚Åª¬π * (unipotent_mul_diag t‚ÇÇ)` is in `U1 v`.
  have unipotent_mem_U1 :=
    (unipotent_mul_diag_inv_mul_unipotent_mul_diag Œ± hŒ± (Quotient.out t‚ÇÅ) (Quotient.out t‚ÇÇ)) ‚ñ∏
      (QuotientGroup.eq.mp h)
  -- But inspecting the top-right entry of `(unipotent_mul_diag t‚ÇÅ)‚Åª¬π * (unipotent_mul_diag t‚ÇÇ)`
  -- gives us `t‚ÇÅ = t‚ÇÇ`.
  have unipotent_apply_zero_one_mem_integer := apply_mem_integer unipotent_mem_U1 0 1
  simp only [unipotent, Matrix.unitOfDetInvertible, Fin.isValue, val_unitOfInvertible,
    Matrix.of_apply, Matrix.cons_val', Matrix.cons_val_one, Matrix.cons_val_fin_one,
    Matrix.cons_val_zero] at unipotent_apply_zero_one_mem_integer
  rw[‚Üê (QuotientAddGroup.out_eq' t‚ÇÅ), ‚Üê (QuotientAddGroup.out_eq' t‚ÇÇ)]
  apply QuotientAddGroup.eq.mpr; apply Ideal.mem_span_singleton'.mpr
  use ‚ü® _ , unipotent_apply_zero_one_mem_integer ‚ü©
  apply (Subtype.coe_inj).mp; push_cast
  ring_nf; rw[mul_inv_cancel‚ÇÄ ((Subtype.coe_ne_coe).mpr hŒ±), one_mul, one_mul]

/-- Each coset in `U1diagU1` is of the form `unipotent_mul_diagU1` for some `t ‚àà O_v`. -/
lemma surjOn_unipotent_mul_diagU1_U1diagU1 :
    Set.SurjOn (unipotent_mul_diagU1 v Œ± hŒ±) ‚ä§ (U1diagU1 v Œ± hŒ±) := by
  rintro _ ‚ü® _, ‚ü® x, hx, _, rfl, rfl ‚ü© , rfl ‚ü©
  -- Each element of `U1diagU1` can be written as `x * diag`,
  -- where `x = !![a,b;c,d]` is viewed as a matrix over `O_v`.
  let a : (adicCompletionIntegers F v) := ‚ü® _ , apply_mem_integer hx 0 0 ‚ü©
  let b : (adicCompletionIntegers F v) := ‚ü® _ , apply_mem_integer hx 0 1 ‚ü©
  let c : (adicCompletionIntegers F v) := ‚ü® _ , apply_mem_integer hx 1 0 ‚ü©
  let d : (adicCompletionIntegers F v) := ‚ü® _ , apply_mem_integer hx 1 1 ‚ü©
  have hx‚ÇÅ : x = !![(a : adicCompletion F v), b; c, d] :=
    (Matrix.etaExpand_eq (x : Matrix (Fin 2) (Fin 2) (adicCompletion F v))).symm
  -- The desired t is `‚Öüd * b`.
  letI invertible_d := (isUnit_apply_one_one hx).invertible
  let t : ‚Ü•(adicCompletionIntegers F v) ‚ß∏ (Ideal.span {Œ±}) := (‚Öüd * b)
  use t
  have ht : (b + -Quotient.out t * d) ‚àà Ideal.span {Œ±} := by
    apply Ideal.mem_span_singleton'.mpr
    have t_def : (Ideal.Quotient.mk (Ideal.span {Œ±})) (Quotient.out t) = (‚Öüd * b) := by
      simp only [Ideal.Quotient.mk_out]; rfl
    obtain ‚ü® q, hq ‚ü© :=
      Ideal.mem_span_singleton'.mp (Ideal.Quotient.eq.mp t_def)
    use - d * q
    rw[mul_assoc, hq]; ring_nf; simp
  /- The rest of the proof is devoted to showing that this t works.
  This means showing that `unipotent_mul_diag‚Åª¬π * x * diag` is in U.
  -/
  simp only [unipotent_mul_diagU1, Set.top_eq_univ, Set.mem_univ, true_and]
  apply QuotientGroup.eq.mpr
  unfold unipotent_mul_diag; rw[mul_inv_rev, ‚Üê mul_assoc, mul_assoc _ _ x]
  /- But `unipotent_mul_diag‚Åª¬π * x * diag = diag‚Åª¬π * (unipotent‚Åª¬π * x) * diag`,
  so it suffices to show `(unipotent‚Åª¬π * x) 0 1 ‚àà (Ideal.span {Œ±})`.
  -/
  apply (conjBy_diag_mem_U1_iff_apply_zero_one_mem_ideal
    (Subgroup.mul_mem _ (Subgroup.inv_mem _ (unipotent_mem_U1 _)) hx)).mpr
  simp only [Fin.isValue, Units.val_mul, Matrix.coe_units_inv, unipotent_def, Matrix.inv_def,
    Matrix.det_fin_two_of, mul_one, mul_zero, sub_zero, Ring.inverse_one,
    Matrix.adjugate_fin_two_of, neg_zero, one_smul, hx‚ÇÅ, Matrix.mul_apply, Matrix.of_apply,
    Matrix.cons_val', Matrix.cons_val_fin_one, Matrix.cons_val_zero, Matrix.cons_val_one,
    Fin.sum_univ_two, one_mul]
  exact_mod_cast ht

variable (v) in
/-- The double coset space `U1diagU1` is the disjoint union of
`unipotent_mul_diagU1` as t ranges over `O_v / Œ±O_v`. -/
theorem bijOn_unipotent_mul_diagU1_U1diagU1 :
    Set.BijOn (unipotent_mul_diagU1 v Œ± hŒ±) ‚ä§ (U1diagU1 v Œ± hŒ±) :=
  ‚ü® mapsTo_unipotent_mul_diagU1_U1diagU1 Œ± hŒ±,
    injOn_unipotent_mul_diagU1 Œ± hŒ±,
    surjOn_unipotent_mul_diagU1_U1diagU1 Œ± hŒ± ‚ü©

end CosetDecomposition

end Local

end TotallyDefiniteQuaternionAlgebra.WeightTwoAutomorphicForm.HeckeOperator
