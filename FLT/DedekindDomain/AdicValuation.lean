import FLT.Mathlib.Topology.Algebra.Valued.ValuationTopology
import FLT.Mathlib.Algebra.Order.GroupWithZero
import Mathlib.RingTheory.DedekindDomain.AdicValuation

/-!

# Adic Completions

If `A` is a valued ring with field of fractions `K` there are two different
complete rings containing `A` one might define, the first is
`ùí™_v = {x ‚àà K_v | v x ‚â§ 1}` and the second is the `v-adic` completion of `A`.
In the case when `A` is a Dedekind domain these definitions give isomorphic
topological `A`-algebras. This file makes some progress towards this.

## Main theorems

* `FiniteAdeleRing.closureAlgebraMapIntegers_eq_integers` : The closure of `A` in `K_v` is `ùí™_v`.

* `FiniteAdeleRing.closureAlgebraMapIntegers_eq_prodIntegers` : If `s` is a set of primes of `A`,
    then the closure of `A` in `‚àè_{v ‚àà s} K_v` is `‚àè_{v ‚àà s} ùí™_v`.
-/

namespace IsDedekindDomain

section Multiplicative

open scoped Multiplicative
lemma exists_ofAdd_natCast_of_le_one {x : ‚Ñ§‚Çò‚ÇÄ} (hx : x ‚â† 0) (hx' : x ‚â§ 1):
    ‚àÉ (k : ‚Ñï), (Multiplicative.ofAdd (-(k : ‚Ñ§))) = x := by
  let y := WithZero.unzero hx
  have hy : y = x := WithZero.coe_unzero hx
  have hy' : y ‚â§ 1 := by
    rw [‚Üê hy] at hx'
    exact WithBot.coe_le_one.mp hx'
  obtain ‚ü®k, hk‚ü© := Int.eq_ofNat_of_zero_le (Int.neg_nonneg_of_nonpos hy')
  use k
  simp only [‚Üê hk, Int.neg_neg, ‚Üê hy, WithZero.coe_inj]
  rfl

lemma exists_ofAdd_natCast_lt {x : ‚Ñ§‚Çò‚ÇÄ} (hx : x ‚â† 0) :
    ‚àÉ (k : ‚Ñï), (Multiplicative.ofAdd (-(k : ‚Ñ§))) < x := by
  obtain ‚ü®y, hnz, hyx‚ü© := WithZero.exists_ne_zero_and_lt hx
  let k': ‚Ñ§ := WithZero.unzero hnz
  use k'.natAbs
  apply lt_of_le_of_lt _ hyx
  rw [‚Üê WithZero.coe_unzero hnz]
  norm_cast
  let _ := |k'|
  apply neg_abs_le k'

end Multiplicative

variable { A : Type* } ( K : Type* ) [CommRing A] [Field K] [Algebra A K] [IsFractionRing A K]
    [IsDedekindDomain A] (v : HeightOneSpectrum A)

lemma ne_zero_of_some_le_intValuation {a : A} {m : Multiplicative ‚Ñ§} (h : m ‚â§ v.intValuation a)
    : a ‚â† 0 := by
  rintro rfl
  simp at h

lemma intValuation_eq_coe_neg_multiplicity {a : A} (hnz : a ‚â† 0) :
    v.intValuation a =
    (Multiplicative.ofAdd (-(multiplicity v.asIdeal (Ideal.span {a}): ‚Ñ§))) := by
  classical
  have hnb : Ideal.span {a} ‚â† ‚ä• := by
    rwa [ne_eq, Ideal.span_singleton_eq_bot]
  rw [HeightOneSpectrum.intValuation_apply, HeightOneSpectrum.intValuationDef_if_neg _ hnz,
    count_associates_factors_eq hnb v.isPrime v.ne_bot]
  nth_rw 1 [‚Üê normalize_eq v.asIdeal]
  congr
  symm
  apply multiplicity_eq_of_emultiplicity_eq_some
  rw [‚Üê UniqueFactorizationMonoid.emultiplicity_eq_count_normalizedFactors v.irreducible hnb]

lemma emultiplicity_eq_of_valuation_eq_ofAdd {a : A} {k : ‚Ñï}
    (hv : v.intValuation a = (Multiplicative.ofAdd (-(k : ‚Ñ§)))) :
    emultiplicity v.asIdeal (Ideal.span {a}) = k := by
  classical
  have hnz : a ‚â† 0 := ne_zero_of_some_le_intValuation _ (le_of_eq hv.symm)
  have hnb : Ideal.span {a} ‚â† ‚ä• := by
    rwa [ne_eq, Ideal.span_singleton_eq_bot]
  simp only [HeightOneSpectrum.intValuation_apply,  HeightOneSpectrum.intValuationDef_if_neg _ hnz,
    ofAdd_neg, WithZero.coe_inv, inv_inj, WithZero.coe_inj, EmbeddingLike.apply_eq_iff_eq,
    Nat.cast_inj] at hv
  rw [‚Üê hv, UniqueFactorizationMonoid.emultiplicity_eq_count_normalizedFactors v.irreducible hnb,
    count_associates_factors_eq hnb v.isPrime v.ne_bot, normalize_eq]

/-- Given `a, b ‚àà A` and `v b ‚â§ v a` we can find `y in A` such that `y` is close to `a / b` by
    the valuation v. -/
lemma exists_adicValued_mul_sub_le {a b : A} {Œ≥ : WithZero (Multiplicative ‚Ñ§)} (hŒ≥ : Œ≥ ‚â† 0)
    (hle : Œ≥ ‚â§ v.intValuation a)
    (hle' : v.intValuation b ‚â§ v.intValuation a) :
    ‚àÉ y, v.intValuation (y * a - b) ‚â§ Œ≥ := by
  -- Find `n` such that `Œ≥ = Multiplicative.ofAdd (-(n : ‚Ñ§))`
  have hŒ≥' : Œ≥ ‚â§ 1 := by
    apply hle.trans
    rw [HeightOneSpectrum.intValuation_apply]
    apply HeightOneSpectrum.intValuation_le_one
  obtain ‚ü®n, hn‚ü© := exists_ofAdd_natCast_of_le_one hŒ≥ hŒ≥'
  rw [‚Üê hn] at hle ‚ä¢
  have hnz : a ‚â† 0 := ne_zero_of_some_le_intValuation _ hle
  have hnb : Ideal.span {a} ‚â† ‚ä• := by
    rwa [ne_eq, Ideal.span_singleton_eq_bot]
  -- Rewrite the statements to involve multiplicity rather than valuations
  rw [intValuation_eq_coe_neg_multiplicity _ hnz, WithZero.coe_le_coe, Multiplicative.ofAdd_le,
    neg_le_neg_iff, Int.ofNat_le] at hle
  have hm : emultiplicity v.asIdeal (Ideal.span {a}) ‚â§ n :=
    le_of_eq_of_le
      (emultiplicity_eq_of_valuation_eq_ofAdd v <| intValuation_eq_coe_neg_multiplicity v hnz)
      (ENat.coe_le_coe.mpr hle)
  have hb : b ‚àà v.asIdeal ^ multiplicity v.asIdeal (Ideal.span {a}) := by
    rwa [‚Üê Ideal.dvd_span_singleton, ‚Üê HeightOneSpectrum.intValuation_le_pow_iff_dvd,
        ‚Üê intValuation_eq_coe_neg_multiplicity _ hnz]
  -- Now make use of
  -- `v.asIdeal ^ multiplicity v.asIdeal (Ideal.span {a}) = v.asIdeal ^ n ‚äî Ideal.span {a}`
  -- (this is where we need `IsDedekindDomain A`)
  rw [‚Üê irreducible_pow_sup_of_ge hnb (HeightOneSpectrum.irreducible v) n hm] at hb
  -- Extract y by writing b as a general term of the sum of the two ideals.
  obtain ‚ü®x, hx, z, hz, hxz‚ü© := Submodule.mem_sup.mp hb
  obtain ‚ü®y, hy‚ü© := Ideal.mem_span_singleton'.mp hz
  use y
  -- And again prove the result about valuations by turning into one about ideals.
  rwa [hy, ‚Üê hxz, sub_add_cancel_right, HeightOneSpectrum.intValuation_apply,
      HeightOneSpectrum.intValuation_le_pow_iff_dvd, Ideal.dvd_span_singleton, neg_mem_iff]

lemma exists_adicValued_sub_lt_of_adicValued_le_one {x : (WithVal (v.valuation K))}
    (Œ≥ : (WithZero (Multiplicative ‚Ñ§))À£) (hx : Valued.v x ‚â§ 1) :
    ‚àÉa, Valued.v ((algebraMap A K a) - (x : v.adicCompletion K)) < Œ≥.val := by
  -- Write `x = n / d`
  obtain ‚ü®‚ü®n, d, hd‚ü©, hnd‚ü© := IsLocalization.surj (nonZeroDivisors A) x
  dsimp only at hnd
  -- Show `v n ‚â§ v d`
  have hnd' := congr_arg Valued.v hnd
  simp only [HeightOneSpectrum.adicValued_apply', map_mul] at hnd'
  have hge : Valued.v ((algebraMap A (WithVal (v.valuation K))) d) ‚â•
      Valued.v ((algebraMap A (WithVal (v.valuation K))) n) :=
    calc Valued.v ((algebraMap A (WithVal (v.valuation K))) d)
          ‚â• (HeightOneSpectrum.valuation K v) x *
            (HeightOneSpectrum.valuation K v) ((algebraMap A (WithVal (v.valuation K))) d) :=
                mul_le_of_le_one_left' hx
        _ = Valued.v ((algebraMap A (WithVal (v.valuation K))) n) := hnd'
  simp only [HeightOneSpectrum.adicValued_apply', ge_iff_le,
    WithVal, HeightOneSpectrum.adicValued_apply,
    HeightOneSpectrum.valuation_of_algebraMap] at hge
  have hdz : (algebraMap A (WithVal (v.valuation K)) d) ‚â† 0 :=
    IsLocalization.to_map_ne_zero_of_mem_nonZeroDivisors _ (fun _ ‚Ü¶ id) hd
  -- Find a suitable `Œ≥` for the bound in `exists_adicValued_mul_sub_le`
  have hv : Valued.v ((algebraMap A (WithVal (v.valuation K)) d)) ‚â† 0 := by
    rw [Valuation.ne_zero_iff]
    exact hdz
  let hu : Valued.v ((algebraMap A (WithVal (v.valuation K)) d)) * Œ≥.val ‚â† 0 := by
    rw [mul_ne_zero_iff]
    exact ‚ü®hv, Œ≥.ne_zero‚ü©
  obtain ‚ü®Œ≥', hŒ≥, hŒ≥u, hŒ≥v‚ü© := WithZero.exists_ne_zero_and_lt_and_lt hu hv
  simp only [WithVal, HeightOneSpectrum.adicValued_apply,
    HeightOneSpectrum.valuation_of_algebraMap, HeightOneSpectrum.intValuation_apply] at hŒ≥v
  -- Now can apply `exists_adicValued_mul_sub_le` to get the approximation of `x`.
  obtain ‚ü®a, hval‚ü© := exists_adicValued_mul_sub_le v hŒ≥ hŒ≥v.le hge
  use a
  rw [‚Üê eq_div_iff_mul_eq hdz] at hnd
  rw [‚Üê UniformSpace.Completion.coe_sub,
      HeightOneSpectrum.valuedAdicCompletion_eq_valuation',
      hnd, sub_div' hdz, map_div‚ÇÄ]
  unfold WithVal at hdz ‚ä¢
  rw [‚Üê Valuation.pos_iff (HeightOneSpectrum.valuation K v)] at hdz
  rw [‚Üê map_mul, ‚Üê map_sub, div_lt_iff‚ÇÄ' hdz, HeightOneSpectrum.valuation_of_algebraMap,
      HeightOneSpectrum.intValuation_apply]
  exact lt_of_le_of_lt hval hŒ≥u

/-- The closure of `A` in `K_v` is `ùí™_v`. -/
theorem closureAlgebraMapIntegers_eq_integers :
    closure (algebraMap A (v.adicCompletion K)).range =
    SetLike.coe (v.adicCompletionIntegers K) := by
  apply subset_antisymm
  -- We know `closure A ‚äÜ ùí™_v` because `ùí™_v` is closed and `A ‚äÜ ùí™_v`
  . apply closure_minimal _ Valued.valuationSubring_isClosed
    rintro b ‚ü®a, rfl‚ü©
    exact HeightOneSpectrum.coe_mem_adicCompletionIntegers v a
  -- Show `ùí™_v ‚äÜ closure A` from `ùí™_v ‚äÜ closure O_[K]` and `closure O_[K] ‚äÜ closure A`
  . let f := fun (k : WithVal (v.valuation K)) => (k : v.adicCompletion K)
    suffices h : closure (f '' (f ‚Åª¬π' (HeightOneSpectrum.adicCompletionIntegers K v))) ‚äÜ
        closure (algebraMap A (HeightOneSpectrum.adicCompletion K v)).range by
      apply Set.Subset.trans _ h
      exact DenseRange.subset_closure_image_preimage_of_isOpen
        UniformSpace.Completion.denseRange_coe (Valued.valuationSubring_isOpen _)
    -- Unfold the topological definitions until we get the result from the previous lemma
    apply closure_minimal _ isClosed_closure
    rintro k ‚ü®x, hx, rfl‚ü©
    unfold f at hx
    rw [Set.mem_preimage, SetLike.mem_coe, HeightOneSpectrum.mem_adicCompletionIntegers,
        Valued.valuedCompletion_apply, HeightOneSpectrum.adicValued_apply'] at hx
    rw [mem_closure_iff_nhds_zero]
    intro U hU
    rw [Valued.mem_nhds] at hU
    obtain ‚ü®Œ≥, hŒ≥‚ü© := hU
    obtain ‚ü®a, ha‚ü© := exists_adicValued_sub_lt_of_adicValued_le_one K v Œ≥ hx
    use algebraMap A K a
    constructor
    . use a
      rfl
    . apply hŒ≥
      simpa

/-- `A` is dense in `ùí™_v`. -/
theorem denseRange_of_integerAlgebraMap :
    DenseRange (algebraMap A (v.adicCompletionIntegers K)) := by
  rw [denseRange_iff_closure_range, Set.eq_univ_iff_forall]
  intro x
  rw [closure_subtype]
  suffices h : Subtype.val ''
      Set.range ((algebraMap A ‚Ü•(HeightOneSpectrum.adicCompletionIntegers K v))) =
      (algebraMap A (v.adicCompletion K)).range by
    rw [h, closureAlgebraMapIntegers_eq_integers K v]
    exact Subtype.coe_prop x
  simp only [RingHom.coe_range, ‚Üê Set.range_comp']
  rfl

/-- An element of `ùí™_v` can be approximated by an element of `A`. -/
theorem exists_adicValued_sub_lt_of_adicCompletionInteger ( x : v.adicCompletionIntegers K )
    ( Œ≥ : (WithZero (Multiplicative ‚Ñ§))À£ ) :
    ‚àÉa, Valued.v ((algebraMap A K a) - (x : v.adicCompletion K)) < Œ≥.val := by
  have h := closureAlgebraMapIntegers_eq_integers K v
  rw [Set.ext_iff] at h
  specialize h x
  simp_rw [RingHom.coe_range, Subtype.coe_prop, iff_true, mem_closure_iff_nhds] at h
  specialize h { y | Valued.v (y  - (x : v.adicCompletion K)) < Œ≥.val }
  have hn : {y | Valued.v (y - (x : v.adicCompletion K)) < Œ≥.val} ‚àà nhds x.val := by
    rw [Valued.mem_nhds]
    use Œ≥
  obtain ‚ü®z, ‚ü®hz, a, ha‚ü©‚ü© := h hn
  use a
  rw [HeightOneSpectrum.algebraMap_adicCompletion, Function.comp_apply] at ha
  rwa [ha]

/-- An element of `‚àè_{v ‚àà s} ùí™_v`, with `s` finite, can be approximated by an element of `A`.
-/
theorem exists_forall_adicValued_sub_lt {Œπ : Type*} (s : Finset Œπ)
    (e : Œπ ‚Üí (WithZero (Multiplicative ‚Ñ§))À£ ) (valuation : Œπ ‚Üí HeightOneSpectrum A)
    (injective : Function.Injective valuation)
    (x : (i : Œπ) ‚Üí (valuation i).adicCompletionIntegers K) :
    ‚àÉ a, ‚àÄ i ‚àà s, Valued.v ((algebraMap A K a) - (x i).val) < (e i).val := by
  -- Approximate elements of `ùí™_v` with elements of `A` using the previous theorem.
  choose f hf using fun (i : s) =>
    exists_adicValued_sub_lt_of_adicCompletionInteger K (valuation i) (x i) (e i)

  -- Convert the hypotheses from being about valuations to being about ideals, so
  -- that we can apply (a suitable corollary of) the Chinese remainder theorem.
  have hexists_e' : ‚àÄ (i : Œπ), ‚àÉ (e' : ‚Ñï), (Multiplicative.ofAdd (-(e' : ‚Ñ§))) < (e i).val := by
    intro i
    apply exists_ofAdd_natCast_lt (e i).ne_zero
  choose e' he' using hexists_e'
  have hinj : ‚àÄ i ‚àà s, ‚àÄ j ‚àà s, i ‚â† j ‚Üí
      (fun i ‚Ü¶ (valuation i).asIdeal) i ‚â† (fun i ‚Ü¶ (valuation i).asIdeal) j := by
    intro _ _ _ _
    exact mt <| fun hij ‚Ü¶ injective (HeightOneSpectrum.ext hij)

  -- Use Chinese remainder theorem to get a single approximation for `f i` for all `i ‚àà s`.
  obtain ‚ü®a, ha‚ü© := IsDedekindDomain.exists_forall_sub_mem_ideal (s := s)
    (fun i => (valuation i).asIdeal) e' (fun i hi => (valuation i).prime) hinj f
  use a
  intro i hi
  specialize ha i hi
  specialize hf ‚ü®i, hi‚ü©
  rw [‚Üê Ideal.dvd_span_singleton, ‚Üê HeightOneSpectrum.intValuation_le_pow_iff_dvd,
      ‚Üê HeightOneSpectrum.intValuation_apply, ‚Üê HeightOneSpectrum.valuation_of_algebraMap (K := K),
      ‚Üê HeightOneSpectrum.valuedAdicCompletion_eq_valuation, algebraMap.coe_sub] at ha
  refine lt_of_le_of_lt ?_ (Valuation.map_add_lt _ (ha.trans_lt (he' i)) hf)
  apply le_of_eq
  congr
  rw [add_sub, sub_eq_sub_iff_add_eq_add, add_right_cancel_iff,
    add_comm_sub, add_sub, eq_sub_iff_add_eq]
  rfl

/-- The closure of `A` in `‚àè_{v ‚àà s} K_v` is `‚àè_{v ‚àà s} ùí™_v`. `s` may be infinite. -/
theorem closureAlgebraMapIntegers_eq_prodIntegers {Œπ : Type*}
    (valuation : Œπ ‚Üí HeightOneSpectrum A) (injective : Function.Injective valuation) :
    closure (SetLike.coe (algebraMap A ((i : Œπ) ‚Üí (valuation i).adicCompletion K)).range) =
    (Set.pi Set.univ (fun (i : Œπ) ‚Ü¶
      (HeightOneSpectrum.adicCompletionIntegers K (valuation i)).carrier)) := by
  apply Set.Subset.antisymm
  . apply closure_minimal
    . rintro c ‚ü®a, ha‚ü© i -
      rw [‚Üê ha]
      simp only [Pi.algebraMap_apply, SetLike.mem_coe]
      exact HeightOneSpectrum.coe_mem_adicCompletionIntegers (valuation i) a
    . apply isClosed_set_pi
      rintro w -
      exact Valued.valuationSubring_isClosed
  . intro f hf
    rw [mem_closure_iff_nhds_zero]
    intro U hU
    rw [Pi.zero_def, nhds_pi, Filter.mem_pi'] at hU
    obtain ‚ü®I, t, htn, hts‚ü© := hU
    choose g hg using fun w => (Valued.is_topological_valuation (t w)).mp (htn w)
    obtain ‚ü®a, ha‚ü© :=
      exists_forall_adicValued_sub_lt K I g valuation injective (fun w => ‚ü®f w, hf w ‚ü®‚ü©‚ü©)
    use algebraMap A _ a
    constructor
    . rw [RingHom.coe_range]
      exact Set.mem_range_self a
    . exact hts fun w hw ‚Ü¶ hg w <| ha w hw

end IsDedekindDomain
