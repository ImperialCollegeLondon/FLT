/-
Copyright (c) 2025 Madison Crim. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Madison Crim
-/

import FLT.Mathlib.Topology.Algebra.RestrictedProduct.Basic
import FLT.DedekindDomain.FiniteAdeleRing.TensorPi
import FLT.DedekindDomain.FiniteAdeleRing.IsDirectLimit

section RestrictedProduct

open Set Filter

variable {Œπ : Type*} {ùìï : Filter Œπ}

variable (ùìï) in
/-- The complements of sets in a `Filter`.
E.g. for the cofinite filter, these are just the finite subsets. -/
def Filter.complement : Set (Set Œπ) := (fun S => S·∂ú) '' ùìï.sets

theorem principal_filter_order {S‚ÇÅ S‚ÇÇ : ùìï.complement} (h : S‚ÇÅ ‚â§ S‚ÇÇ) :
    (ùìü S‚ÇÇ·∂ú : Filter Œπ) ‚â§ ùìü S‚ÇÅ·∂ú := by
  simp only [le_principal_iff, mem_principal, compl_subset_compl]; exact h

theorem filter_bot :
    ‚àÄ S : ùìï.complement, ùìï ‚â§ (ùìü S·∂ú : Filter Œπ) := by
  intro S
  simp only [le_principal_iff]
  refine Filter.mem_sets.mp ?_
  have h : ùìï.sets = (fun S => S·∂ú) '' (ùìï.complement) := by
    rw[complement]
    exact Eq.symm (compl_compl_image ùìï.sets)
  rw[h]
  simp

open scoped RestrictedProduct

variable {R : Œπ ‚Üí Type*} {A : Œπ ‚Üí Type*} [Œ† i, SetLike (A i) (R i)] {C : Œ† i, A i}

variable (C) in
/-- This is (isomorphic to) `(Œ† i ‚àà S, R i) √ó (Œ† i ‚àâ S, A i)` -/
def mem_A_away_from_S (S : ùìï.complement) : Type _ :=
  Œ† ≥ i, [R i, C i]_[ùìü S·∂ú]

/-- The inclusions between `mem_A_away_from_S` which will form the directed system. -/
def inclusion (S‚ÇÅ S‚ÇÇ : ùìï.complement) (h : S‚ÇÅ ‚â§ S‚ÇÇ) :
    mem_A_away_from_S C S‚ÇÅ ‚Üí mem_A_away_from_S C S‚ÇÇ :=
  RestrictedProduct.inclusion _ _ (principal_filter_order h)

instance directed_system :
    @DirectedSystem (ùìï.complement) _ (mem_A_away_from_S C) (inclusion) where
  map_self _ _ := rfl
  map_map _ _ _ _ _ _ := rfl

/-- The maps from the directed system to the actual restricted product. -/
def inclusion_to_restrictedProduct (S : ùìï.complement) :
    mem_A_away_from_S C S ‚Üí Œ† ≥ i, [R i, C i]_[ùìï] :=
  RestrictedProduct.inclusion _ _ (filter_bot S)

end RestrictedProduct

open scoped RestrictedProduct TensorProduct Module.IsDirectLimit

variable {A : Type*} [CommRing A] {Œπ : Type*} {R : Œπ ‚Üí Type*} {‚Ñ± : Filter Œπ}
  [Œ† i, AddCommGroup (R i)] [‚àÄ i, Module A (R i)] {C : ‚àÄ i, Submodule A (R i)} {M : Type*}
  [AddCommGroup M] [Module A M] [Module.FinitePresentation A M] (S : Filter.complement ‚Ñ±)

open Set Filter RestrictedProduct

instance add (S : ‚Ñ±.complement) :
  AddCommMonoid (mem_A_away_from_S C S) := by
  dsimp [mem_A_away_from_S]
  exact AddCommGroup.toDivisionAddCommMonoid.toAddCommMonoid

instance module' (S : ‚Ñ±.complement) :
  Module A (mem_A_away_from_S C S) := by
  dsimp [mem_A_away_from_S]
  exact instModuleCoeOfSMulMemClass R

/-- Linear map version of `inclusion`. -/
def inclusion_module (S‚ÇÅ S‚ÇÇ : ‚Ñ±.complement) (h : S‚ÇÅ ‚â§ S‚ÇÇ) :
    mem_A_away_from_S C S‚ÇÅ ‚Üí‚Çó[A]
      mem_A_away_from_S C S‚ÇÇ where
  toFun := inclusion S‚ÇÅ S‚ÇÇ h
  map_add' _ _ := rfl
  map_smul' _ _ := rfl

lemma inclusion_module_apply (S‚ÇÅ S‚ÇÇ : ‚Ñ±.complement) (h : S‚ÇÅ ‚â§ S‚ÇÇ) (x : mem_A_away_from_S C S‚ÇÅ) :
  inclusion_module S‚ÇÅ S‚ÇÇ h x = ‚ü®x.1, x.2.filter_mono (principal_filter_order h)‚ü© := rfl

/-- Linear map version of `inclusion_to_restrictedProduct` -/
def inclusion_to_restricted_product_module (S : ‚Ñ±.complement) :
  mem_A_away_from_S C S ‚Üí‚Çó[A] Œ† ≥ i, [R i, C i]_[‚Ñ±] where
  toFun := inclusion_to_restrictedProduct S
  map_add' _ _ := rfl
  map_smul' _ _ := rfl

instance directed : IsDirected (‚Ñ±.complement) (¬∑ ‚â§ ¬∑) := by
  refine { directed := ?_ }
  intro Si Sj
  obtain ‚ü®Si, hi‚ü© := Si
  obtain ‚ü®Sj, hj‚ü© := Sj
  let c := Si ‚à™ Sj
  have : c ‚àà ‚Ñ±.complement := by
    unfold Filter.complement at hi hj ‚ä¢
    simp only [mem_image, Filter.mem_sets] at hi hj ‚ä¢
    obtain ‚ü®si, hsi‚ü© := hi
    obtain ‚ü®sj, hsj‚ü© := hj
    use si ‚à© sj
    constructor
    ¬∑ exact ‚Ñ±.inter_sets hsi.1 hsj.1
    ¬∑ unfold c
      rw [compl_inter, hsi.2, hsj.2]
  use ‚ü®c, this‚ü©
  constructor <;>
  simp [c]

instance RestrictedProductIsDirectLimit :
  Module.IsDirectLimit (mem_A_away_from_S C)
  Œ† ≥ i, [R i, C i]_[‚Ñ±] (inclusion_module (‚Ñ± := ‚Ñ±))
  (inclusion_to_restricted_product_module ) where
  inj S·µ¢ S‚±º mi mj hmij := by
    obtain ‚ü®S‚Çñ, hik, hjk‚ü© := @directed_of _ (¬∑ ‚â§ ¬∑) directed S·µ¢ S‚±º
    refine ‚ü®S‚Çñ, hik, hjk, ?_‚ü©
    dsimp [inclusion_module,_root_.inclusion, RestrictedProduct.inclusion]
    dsimp [inclusion_to_restricted_product_module, inclusion_to_restrictedProduct,
      RestrictedProduct.inclusion] at hmij
    apply Subtype.ext
    simp only
    injection hmij
  surj r := by
    dsimp [inclusion_to_restricted_product_module, inclusion_to_restrictedProduct]
    let b:= r.property
    let c:= r.1
    have : { i : Œπ | r.1 i ‚àà (C i : Set (R i)) }·∂ú ‚àà ‚Ñ±.complement := by
      rw [complement]
      simp only [mem_image, Filter.mem_sets]
      refine ‚ü®{ i : Œπ | r.1 i ‚àà (C i : Set (R i)) }, r.property, ?_‚ü©
      rfl
    use ‚ü®{ i : Œπ | r.1 i ‚àà (C i : Set (R i)) }·∂ú, this‚ü©
    apply RestrictedProduct.exists_inclusion_eq_of_eventually
    simp only [SetLike.mem_coe, compl_compl, eventually_principal, mem_setOf_eq]
    exact fun x a ‚Ü¶ a
  compatibility i j hij x := by
    dsimp [inclusion_to_restricted_product_module, inclusion_to_restrictedProduct,
    inclusion_module,_root_.inclusion, inclusion_module,RestrictedProduct.inclusion]
    exact Subtype.ext rfl

variable {Œπ : Type*} (R : Œπ ‚Üí Type*) (S : Set Œπ) [‚àÄ i, Decidable (i ‚àà S)] (A : (i : Œπ) ‚Üí Set (R i))

open scoped Filter

namespace RestrictedProduct

section type

/-- This canonical isomorphism between `Œ† ≥ i, [R i, A i]_[ùìü S]` and
`(Œ† i ‚àà S, R i) √ó (Œ† i ‚àâ S, A i)`
-/
def principalEquivProd : Œ† ≥ i, [R i, A i]_[ùìü S] ‚âÉ
    (Œ† i : {i // i ‚àà S}, A i) √ó (Œ† i : {i // i ‚àâ S}, R i) where
  toFun x := (fun i ‚Ü¶ ‚ü®x i, x.property i.property‚ü©, fun i ‚Ü¶ x i)
  invFun y := ‚ü®fun i ‚Ü¶ if hi : i ‚àà S then y.1 ‚ü®i, hi‚ü© else y.2 ‚ü®i, hi‚ü©,
  Filter.eventually_principal.mpr (fun i hi ‚Ü¶ by simp only [hi]; exact (y.1 ‚ü®i, hi‚ü©).2)‚ü©
  left_inv x := by
    simp only [dite_eq_ite, ite_self]
    rfl
  right_inv x := by
    simp only [mk_apply, Subtype.coe_prop, ‚ÜìreduceDIte, Subtype.coe_eta]
    ext i
    ¬∑ rfl
    ¬∑ simp only [dif_neg i.property]

end type


variable {T : Œπ ‚Üí Type*} [Œ† i, SetLike (T i) (R i)] {A : Œ† i, T i}

section monoid

/-- Monoid equivalence version of `principalEquivProd`. -/
@[to_additive /-- Additive monoid equivalence of principalEquivProd. -/]
def principalMulEquivProd [Œ† i, Monoid (R i)] [‚àÄ i, SubmonoidClass (T i) (R i)] :
    Œ† ≥ i, [R i, A i]_[ùìü S] ‚âÉ* (Œ† i : {i // i ‚àà S}, A i) √ó (Œ† i : {i // i ‚àâ S}, R i) where
  __ := principalEquivProd R S _
  map_mul' _ _ := rfl

end monoid

end RestrictedProduct

variable {Œπ : Type*} (R : Œπ ‚Üí Type*) {‚Ñ± : Filter Œπ} (A : Type*) [CommRing A]

open scoped RestrictedProduct TensorProduct

open Filter

/-- Module equivalence version of `principalEquivProd`. -/
noncomputable def RestrictedProduct.principal [Œ† i, AddCommGroup (R i)]
    [‚àÄ i, Module A (R i)] {C : ‚àÄ i, Submodule A (R i)}
    (S : Set Œπ) [‚àÄ i, Decidable (i ‚àà S)] :
   (Œ† ≥ i, [R i, C i]_[ùìü S]) ‚âÉ‚Çó[A] ((Œ† i : {i // i ‚àà S}, C i) √ó
  (Œ† i : {i // i ‚àâ S}, R i)) where
    __ := principalAddEquivSum R S (A := C)
    map_smul' m x := by
      simp only [AddEquiv.toEquiv_eq_coe, Equiv.toFun_as_coe, EquivLike.coe_coe, RingHom.id_apply]
      dsimp [principalAddEquivSum, principalEquivProd]
      ext i
      ¬∑ simp only [Pi.smul_apply, SetLike.coe_sort_coe, SetLike.val_smul]
      ¬∑ simp only [Pi.smul_apply]

variable [Œ† i, AddCommGroup (R i)] [‚àÄ i, Module A (R i)] (C : ‚àÄ i, Submodule A (R i))

noncomputable instance : DecidableEq ‚Ñ±.complement := Classical.typeDecidableEq ‚Üë‚Ñ±.complement

instance : Nonempty ‚Ñ±.complement := by
  use ‚àÖ
  dsimp [complement]
  use Set.univ
  split_ands
  ¬∑ exact Filter.univ_mem (f := ‚Ñ±)
  ¬∑ simp only [compl_univ]

instance : DirectedSystem (mem_A_away_from_S C) fun x1 x2 x3 ‚Ü¶
  ‚áë(inclusion_module (‚Ñ± := ‚Ñ±) (C:= C) x1 x2 x3) := directed_system
