/-
Copyright (c) 2025 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.FieldTheory.Finite.Basic
import Mathlib.RingTheory.Invariant.Profinite
import Mathlib.RingTheory.Frobenius
import Mathlib.RingTheory.RootsOfUnity.PrimitiveRoots
import Mathlib.RingTheory.Unramified.Locus
import FLT.Deformations.RepresentationTheory.ContinuousSMulDiscrete

/-!
# Frobenius elements

In algebraic number theory, if `L/K` is a finite Galois extension of number fields, with rings of
integers `ùìûL/ùìûK`, and if `q` is prime ideal of `ùìûL` lying over a prime ideal `p` of `ùìûK`, then
there exists a **Frobenius element** `Frob p` in `Gal(L/K)` with the property that
`Frob p x ‚â° x ^ #(ùìûK/p) (mod q)` for all `x ‚àà ùìûL`.

Following `RingTheory/Invariant.lean`, we develop the theory in the setting that
there is a finite group `G` acting on a ring `S`, and `R` is the fixed subring of `S`.

## Main results

Let `S/R` be an extension of rings, `Q` be a prime of `S`,
and `P := R ‚à© Q` with finite residue field of cardinality `q`.

- `AlgHom.IsArithFrobAt`: We say that a `œÜ : S ‚Üí‚Çê[R] S` is an (arithmetic) Frobenius at `Q`
  if `œÜ x ‚â° x ^ q (mod Q)` for all `x : S`.
- `AlgHom.IsArithFrobAt.apply_of_pow_eq_one`:
  Suppose `S` is a domain and `œÜ` is a Frobenius at `Q`,
  then `œÜ Œ∂ = Œ∂ ^ q` for any `m`-th root of unity `Œ∂` with `q ‚à§ m`.
- `AlgHom.IsArithFrobAt.eq_of_isUnramifiedAt`:
  Suppose `S` is noetherian, `Q` contains all zero-divisors, and the extension is unramified at `Q`.
  Then the Frobenius is unique (if exists).

Let `G` be a finite group acting on a ring `S`, and `R` is the fixed subring of `S`.

- `IsArithFrobAt`: We say that a `œÉ : G` is an (arithmetic) Frobenius at `Q`
  if `œÉ ‚Ä¢ x ‚â° x ^ q (mod Q)` for all `x : S`.
- `IsArithFrobAt.mul_inv_mem_inertia`:
  Two Frobenius elements at `Q` differ by an element in the inertia subgroup of `Q`.
- `IsArithFrobAt.conj`: If `œÉ` is a Frobenius at `Q`, then `œÑœÉœÑ‚Åª¬π` is a Frobenius at `œÉ ‚Ä¢ Q`.
- `IsArithFrobAt.exists_of_isInvariant`: Frobenius element exists.
-/

variable {R S : Type*} [CommRing R] [CommRing S] [Algebra R S]

namespace IsArithFrobAt

open scoped Pointwise

variable {G : Type*} [Group G] [MulSemiringAction G S] [SMulCommClass G R S]
variable {Q : Ideal S} {œÉ œÉ' : G}

variable [TopologicalSpace G] [CompactSpace G] [TotallyDisconnectedSpace G]
variable [IsTopologicalGroup G] [Algebra.IsInvariant R S G]
variable [ContinuousSMulDiscrete G S]

variable (R G Q) in
attribute [local instance] Ideal.Quotient.field in
/-- Let `G` be a finite group acting on `S`, and `R` be the fixed subring.
If `Q` is a prime of `S` with finite residue field,
then there exists a Frobenius element `œÉ : G` at `Q`. -/
lemma exists_of_isInvariant_of_profinite
    [Q.IsMaximal] [Finite (R ‚ß∏ Q.under R)] : ‚àÉ œÉ : G, IsArithFrobAt R œÉ Q := by
  letI : TopologicalSpace S := ‚ä•
  letI : DiscreteTopology S := ‚ü®rfl‚ü©
  let P := Q.under R
  have : Algebra.IsIntegral R S := Algebra.IsInvariant.isIntegral_of_profinite (G := G)
  -- have : Q.IsMaximal := Ideal.Quotient.maximal_of_isField _ (Finite.isField_of_domain (S ‚ß∏ Q))
  have : P.IsMaximal := Ideal.isMaximal_comap_of_isIntegral_of_isMaximal Q
  obtain ‚ü®p, hc‚ü© := CharP.exists (R ‚ß∏ P)
  -- have : Finite (R ‚ß∏ P) := .of_injective _ Ideal.algebraMap_quotient_injective
  cases nonempty_fintype (R ‚ß∏ P)
  obtain ‚ü®k, hp, hk‚ü© := FiniteField.card (R ‚ß∏ P) p
  have := CharP.of_ringHom_of_ne_zero (algebraMap (R ‚ß∏ P) (S ‚ß∏ Q)) p hp.ne_zero
  have : ExpChar (S ‚ß∏ Q) p := .prime hp
  have : PerfectField (S ‚ß∏ Q) := Algebra.IsAlgebraic.perfectField (K := (R ‚ß∏ P))
  let l : (S ‚ß∏ Q) ‚âÉ‚Çê[R ‚ß∏ P] S ‚ß∏ Q :=
    { __ := iterateFrobeniusEquiv (S ‚ß∏ Q) p k,
      commutes' r := by
        dsimp [iterateFrobenius_def]
        rw [‚Üê map_pow, ‚Üê hk, FiniteField.pow_card] }
  obtain ‚ü®œÉ, hœÉ‚ü© := Ideal.Quotient.stabilizerHom_surjective_of_profinite (G := G) P Q l
  refine ‚ü®œÉ, fun x ‚Ü¶ ?_‚ü©
  rw [‚Üê Ideal.Quotient.eq, Nat.card_eq_fintype_card, hk]
  exact DFunLike.congr_fun hœÉ (Ideal.Quotient.mk Q x)

variable (S G) in
lemma exists_primesOver_isConj_of_profinite (P : Ideal R) [Finite (R ‚ß∏ P)] [P.IsPrime] :
    ‚àÉ œÉ : Ideal.primesOver P S ‚Üí G, (‚àÄ Q, IsArithFrobAt R (œÉ Q) Q.1) ‚àß
      (‚àÄ Q‚ÇÅ Q‚ÇÇ, IsConj (œÉ Q‚ÇÅ) (œÉ Q‚ÇÇ)) := by
  letI : TopologicalSpace S := ‚ä•
  letI : DiscreteTopology S := ‚ü®rfl‚ü©
  have hP : P.IsMaximal := Ideal.Quotient.maximal_of_isField _ (Finite.isField_of_domain (R ‚ß∏ P))
  have : Algebra.IsIntegral R S := Algebra.IsInvariant.isIntegral_of_profinite (G := G)
  obtain hs | ‚ü®Q, hQ, hQ‚ÇÇ‚ü© := Set.eq_empty_or_nonempty (Ideal.primesOver P S)
  ¬∑ simp [hs]
  have (Q' : Ideal.primesOver P S) : ‚àÉ œÉ : G, Q'.1 = œÉ ‚Ä¢ Q :=
    Algebra.IsInvariant.exists_smul_of_under_eq_of_profinite _ _ (hQ‚ÇÇ.over.symm.trans Q'.2.2.over)
  choose œÑ hœÑ using this
  have : Q.IsMaximal := Ideal.isMaximal_of_isIntegral_of_isMaximal_comap (R := R) Q
    (by rwa [‚Üê Ideal.under, ‚Üê hQ‚ÇÇ.over])
  have : Finite (R ‚ß∏ Q.under R) := by rwa [‚Üê hQ‚ÇÇ.over]
  obtain ‚ü®œÉ, hœÉ‚ü© := exists_of_isInvariant_of_profinite R G Q
  refine ‚ü®fun Q' ‚Ü¶ œÑ Q' * œÉ * (œÑ Q')‚Åª¬π, fun Q' ‚Ü¶ hœÑ Q' ‚ñ∏ hœÉ.conj (œÑ Q'), fun Q‚ÇÅ Q‚ÇÇ ‚Ü¶
    .trans (.symm (isConj_iff.mpr ‚ü®œÑ Q‚ÇÅ, rfl‚ü©)) (isConj_iff.mpr ‚ü®œÑ Q‚ÇÇ, rfl‚ü©)‚ü©

variable (R G Q)

/-- Let `G` be a finite group acting on `S`, `R` be the fixed subring, and `Q` be a prime of `S`
with finite residue field. This is an arbitrary choice of a Frobenius over `Q`. It is chosen so that
the Frobenius elements of `Q‚ÇÅ` and `Q‚ÇÇ` are conjugate if they lie over the same prime. -/
noncomputable
def _root_.arithFrobAt' [Q.IsPrime] [Finite (R ‚ß∏ Q.under R)] : G :=
  (exists_primesOver_isConj_of_profinite S G (Q.under R)).choose ‚ü®Q, ‚Äπ_‚Ä∫, ‚ü®rfl‚ü©‚ü©

protected lemma arithFrobAt' [Q.IsPrime] [Finite (R ‚ß∏ Q.under R)] :
    IsArithFrobAt R (arithFrobAt' R G Q) Q :=
  (exists_primesOver_isConj_of_profinite S G (Q.under R)).choose_spec.1 ‚ü®Q, ‚Äπ_‚Ä∫, ‚ü®rfl‚ü©‚ü©

lemma _root_.isConj_arithFrobAt'
    [Q.IsPrime] [Finite (R ‚ß∏ Q.under R)] (Q' : Ideal S) [Q'.IsPrime] [Finite (R ‚ß∏ Q'.under R)]
    (H : Q.under R = Q'.under R) : IsConj (arithFrobAt' R G Q) (arithFrobAt' R G Q') := by
  obtain ‚ü®P, hP, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü© :
      ‚àÉ P : Ideal R, P.IsPrime ‚àß P = Q.under R ‚àß P = Q'.under R ‚àß Finite (R ‚ß∏ P) :=
    ‚ü®Q.under R, inferInstance, rfl, H, ‚Äπ_‚Ä∫‚ü©
  convert (exists_primesOver_isConj_of_profinite S G P).choose_spec.2
    ‚ü®Q, ‚Äπ_‚Ä∫, ‚ü®h‚ÇÅ‚ü©‚ü© ‚ü®Q', ‚Äπ_‚Ä∫, ‚ü®h‚ÇÇ‚ü©‚ü©
  ¬∑ subst h‚ÇÅ; rfl
  ¬∑ subst h‚ÇÇ; rfl

end IsArithFrobAt
