import Mathlib.Algebra.Order.AbsoluteValue.Basic
import Mathlib.Tactic
import FLT.Mathlib.Algebra.Order.AbsoluteValue.Basic

open scoped Topology

namespace AbsoluteValue

variable {F S : Type*} [Field F] [Field S] [LinearOrder S] [IsStrictOrderedRing S]
  {v w : AbsoluteValue F S}

/--
If `v` is a nontrivial absolute value, and `w` is another absolute value such that `w x < 1`
if `v x < 1`, then we must also have `v x < 1` if `w x < 1`.
-/
theorem lt_one_iff_of_lt_one_imp [Archimedean S] [TopologicalSpace S] [OrderTopology S]
      (hv : v.IsNontrivial) (h : ‚àÄ x, v x < 1 ‚Üí w x < 1) {a : F} :
    v a < 1 ‚Üî w a < 1:= by
  let ‚ü®x‚ÇÄ, hx‚ÇÄ‚ü© := hv.exists_abv_lt_one
  refine ‚ü®h a, fun hw => ?_‚ü©
  by_contra! hv
  have (n : ‚Ñï) : w x‚ÇÄ < w a ^ n := by
    have : v (x‚ÇÄ * (1 / a ^ n)) < 1 := by
      rw [mul_one_div_pow_lt_iff _ (by linarith)]
      exact lt_of_lt_of_le hx‚ÇÄ.2 <| one_le_pow‚ÇÄ hv
    exact mul_one_div_pow_lt_iff _ (pos_of_pos w (by linarith)) |>.1 <| h _ this
  have hcontr : Filter.Tendsto (fun (_ : ‚Ñï) => w x‚ÇÄ) Filter.atTop (ùìù 0) := by
    have hwn : Filter.Tendsto (fun n => w a ^ n) Filter.atTop (ùìù 0) := by
      have := abs_eq_self.2 (w.nonneg _) ‚ñ∏ hw
      exact tendsto_pow_atTop_nhds_zero_iff.2 this
    have hwn' : ‚àÄ·∂† n in Filter.atTop, w x‚ÇÄ ‚â§ w a ^ n := by
      simp only [Filter.eventually_atTop, ge_iff_le]
      exact ‚ü®1, fun n _ => le_of_lt (this n)‚ü©
    exact tendsto_of_tendsto_of_tendsto_of_le_of_le' tendsto_const_nhds
      hwn (Filter.Eventually.of_forall fun (_ : ‚Ñï) => w.nonneg x‚ÇÄ) hwn'
  linarith [tendsto_nhds_unique hcontr tendsto_const_nhds, w.pos hx‚ÇÄ.1]

/--
If `v` and `w` are two real absolute values on `F`, `v` is non-trivial, and `v x < 1` if and
only if `w x < 1`, then `log (v a) / log (w a)` is constant for all `a ‚àà K`.
-/
theorem log_div_image_eq_singleton_of_le_one_iff {v w : AbsoluteValue F ‚Ñù}
    (hv : v.IsNontrivial)
    (h : ‚àÄ x, v x < 1 ‚Üî w x < 1) :
    let f : F ‚Üí ‚Ñù := fun a => Real.log (v a) / Real.log (w a)
    ‚àÉ (a : F) (_ : 1 < v a), ‚àÄ (b : F) (_ : 1 < v b), f b = f a := by
  obtain ‚ü®a, ha‚ü© := hv.exists_abv_gt_one
  refine ‚ü®a, ha, fun b hb‚ÇÅ => ?_‚ü©
  by_contra! hb‚ÇÇ
  wlog hwlog : Real.log (v b) / Real.log (w b) < Real.log (v a) / Real.log (w a) generalizing a b
  ¬∑ exact this b hb‚ÇÅ a ha hb‚ÇÇ.symm <| lt_of_le_of_ne (not_lt.1 hwlog) hb‚ÇÇ.symm
  have : Real.log (v b) / Real.log (v a) < Real.log (w b) / Real.log (w a) := by
    have hwa := (one_lt_iff_of_lt_one_iff h _).1 ha
    have hwb := (one_lt_iff_of_lt_one_iff h _).1 hb‚ÇÅ
    rw [div_lt_div_iff‚ÇÄ (Real.log_pos ha) (Real.log_pos hwa)]
    nth_rw 2 [mul_comm]
    rwa [‚Üê div_lt_div_iff‚ÇÄ (Real.log_pos hwb) (Real.log_pos hwa)]
  let ‚ü®q, hq‚ü© := exists_rat_btwn this
  rw [‚Üê Rat.num_div_den q, Rat.cast_div, Rat.cast_intCast, Rat.cast_natCast] at hq
  have h‚ÇÄ : v (b ^ q.den / a ^ q.num) < 1 := by
    have := hq.1
    rwa [div_lt_div_iff‚ÇÄ (Real.log_pos ha) (by simp only [Nat.cast_pos, q.den_pos]), mul_comm,
      ‚Üê Real.log_pow, ‚Üê Real.log_zpow, Real.log_lt_log_iff (pow_pos (by linarith) _)
      (zpow_pos (by linarith) _), ‚Üê div_lt_one (zpow_pos (by linarith) _),
      ‚Üê map_pow, ‚Üê map_zpow‚ÇÄ, ‚Üê map_div‚ÇÄ] at this
  have h‚ÇÅ : 1 < w (b ^ q.den / a ^ q.num) := by
    have hwa := (one_lt_iff_of_lt_one_iff h _).1 ha
    letI := (one_lt_iff_of_lt_one_iff h _).1 hb‚ÇÅ
    have := hq.2
    rw [div_lt_div_iff‚ÇÄ (by simp only [Nat.cast_pos, q.den_pos]) (Real.log_pos hwa)] at this
    nth_rw 2 [mul_comm] at this
    rwa [‚Üê Real.log_pow, ‚Üê Real.log_zpow,
      Real.log_lt_log_iff (zpow_pos (by linarith) _) (pow_pos (by linarith) _),
      ‚Üê one_lt_div (zpow_pos (by linarith) _), ‚Üê map_pow, ‚Üê map_zpow‚ÇÄ, ‚Üê map_div‚ÇÄ] at this
  exact not_lt_of_lt ((h _).1 h‚ÇÄ) h‚ÇÅ

theorem exists_rpow_of_one_lt {v w : AbsoluteValue F ‚Ñù} (hv : v.IsNontrivial)
    (h : ‚àÄ x, v x < 1 ‚Üî w x < 1) :
    ‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, 1 < v x ‚Üí v x = w x ^ t := by
  obtain ‚ü®a, ha, hlog‚ü© := log_div_image_eq_singleton_of_le_one_iff hv h
  refine ‚ü®Real.log (v a) / Real.log (w a),
    div_pos (Real.log_pos ha) (Real.log_pos ((one_lt_iff_of_lt_one_iff h a).1 ha)), fun b hb => ?_‚ü©
  simp_rw [‚Üê hlog b hb]
  letI := (one_lt_iff_of_lt_one_iff h b).1 hb
  rw [div_eq_inv_mul, Real.rpow_mul (w.nonneg _), Real.rpow_inv_log (by linarith) (by linarith),
    Real.exp_one_rpow, Real.exp_log (by linarith)]

open Real in
/--
Let `v` and `w` be two real absolute values on `F`, where `v` is non-trivial. The condition that
`v x < 1` if and only if `w x < 1` is equivalent to the condition that `v = w ^ t` for some
real `t > 0`.
-/
theorem eq_rpow_iff_lt_one_iff {v : AbsoluteValue F ‚Ñù} (w : AbsoluteValue F ‚Ñù)
    (hv : v.IsNontrivial) :
    (‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, v x = (w x) ^ t) ‚Üî (‚àÄ x, v x < 1 ‚Üî w x < 1) := by
  refine ‚ü®fun ‚ü®t, ht, h‚ü© x => h x ‚ñ∏ Real.rpow_lt_one_iff' (w.nonneg _) ht, fun h => ?_‚ü©
  suffices : ‚àÉ (t : ‚Ñù) (_ : t > 0), ‚àÄ x, 1 < v x ‚Üí v x = w x ^ t
  ¬∑ obtain ‚ü®t, ht, hsuff‚ü© := this
    refine ‚ü®t, ht, fun x => ?_‚ü©
    by_cases h‚ÇÄ : v x = 0
    ¬∑ rw [(map_eq_zero v).1 h‚ÇÄ, map_zero, map_zero, zero_rpow (by linarith)]
    ¬∑ by_cases h‚ÇÅ : v x = 1
      ¬∑ rw [h‚ÇÅ, (eq_one_iff_of_lt_one_iff h x).1 h‚ÇÅ, one_rpow]
      ¬∑ by_cases h‚ÇÇ : 0 < v x ‚àß v x < 1
        ¬∑ rw [‚Üê inv_inj, ‚Üê map_inv‚ÇÄ v, hsuff _ (map_inv‚ÇÄ v _ ‚ñ∏ one_lt_inv_iff‚ÇÄ.2 h‚ÇÇ), map_inv‚ÇÄ,
            Real.inv_rpow (w.nonneg _)]
        ¬∑ rw [‚Üê one_lt_inv_iff‚ÇÄ, ‚Üê map_inv‚ÇÄ, not_lt] at h‚ÇÇ
          rw [‚Üê ne_eq, ‚Üê inv_ne_one, ‚Üê map_inv‚ÇÄ] at h‚ÇÅ
          exact hsuff _ <| (inv_lt_one_iff.1 <| lt_of_le_of_ne h‚ÇÇ h‚ÇÅ).resolve_left
            ((map_ne_zero v).1 h‚ÇÄ)
  exact exists_rpow_of_one_lt hv h

/--
If `v` is non-trivial and `v = w ^ t` for some `t > 0`, then we can find an `a ‚àà F` such that
`v a < 1` while `1 ‚â§ w a`.
-/
theorem exists_lt_one_one_le_of_ne_rpow {v w : AbsoluteValue F ‚Ñù}
    (hv : v.IsNontrivial)
    (h : ¬¨‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, v x = (w x) ^ t) :
    ‚àÉ a : F, v a < 1 ‚àß 1 ‚â§ w a := by
  contrapose! h
  exact eq_rpow_iff_lt_one_iff _ hv |>.2 <| fun  _ => lt_one_iff_of_lt_one_imp hv h

theorem ne_pow_symm {v w : AbsoluteValue F ‚Ñù} (h : ¬¨‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, v x = (w x) ^ t) :
    ¬¨‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, w x = (v x) ^ t := by
  simp only [exists_prop, not_exists, not_and, not_forall] at h ‚ä¢
  refine fun t ht => let ‚ü®x, hx‚ü© := h t‚Åª¬π (_root_.inv_pos.2 ht); ‚ü®x, ?_‚ü©
  contrapose! hx
  exact Real.eq_rpow_inv (v.nonneg _) (w.nonneg _) (by linarith) |>.2 hx.symm

/--
If `v` and `w` are two non-trivial absolute values such that `v = w ^ t` for some `t > 0`, then
we can find an `a ‚àà K` such that `1 < v a` while `w a  < 1`.
-/
theorem exists_one_lt_lt_one_of_ne_rpow {v w : AbsoluteValue F ‚Ñù}
    (hv : v.IsNontrivial)
    (hw : w.IsNontrivial)
    (h : ¬¨‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, v x = (w x) ^ t) :
    ‚àÉ a : F, 1 < v a ‚àß w a < 1 := by
  let ‚ü®a, ha‚ü© := exists_lt_one_one_le_of_ne_rpow hv h
  let ‚ü®b, hb‚ü© := exists_lt_one_one_le_of_ne_rpow hw (ne_pow_symm h)
  refine ‚ü®b / a, ?_‚ü©
  simp only [map_div‚ÇÄ]
  exact ‚ü®one_lt_div (pos_of_pos v (by linarith)) |>.2 (by linarith),
    div_lt_one (by linarith) |>.2 (by linarith)‚ü©
