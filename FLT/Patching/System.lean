import FLT.Mathlib.Algebra.Module.Submodule.Basic
import FLT.Patching.Algebra
import FLT.Patching.Over
import FLT.Patching.Module
import FLT.Patching.Utils.Depth

variable (Œõ : Type*) [CommRing Œõ]
variable {Œπ : Type*} (R : Œπ ‚Üí Type*)
variable [‚àÄ i, CommRing (R i)] [‚àÄ i, IsLocalRing (R i)] [‚àÄ i, Algebra Œõ (R i)]
variable [‚àÄ i, TopologicalSpace (R i)] [‚àÄ i, IsTopologicalRing (R i)]
variable [‚àÄ i, CompactSpace (R i)] [‚àÄ i, IsLocalRing.IsAdicTopology (R i)]

variable (M : Œπ ‚Üí Type*) [‚àÄ i, AddCommGroup (M i)] [‚àÄ i, Module Œõ (M i)]
variable [‚àÄ i, Module (R i) (M i)] [‚àÄ i, IsScalarTower Œõ (R i) (M i)]
variable (F : Ultrafilter Œπ)
variable [TopologicalSpace Œõ] [IsTopologicalRing Œõ]
variable [IsLocalRing Œõ] [IsNoetherianRing Œõ] [NonarchimedeanRing Œõ] [T2Space Œõ]

attribute [local instance] Module.quotientAnnihilator

variable [Algebra.UniformlyBoundedRank R]
variable [‚àÄ i, Module.Free (Œõ ‚ß∏ Module.annihilator Œõ (M i)) (M i)]
variable [Module.UniformlyBoundedRank Œõ M] [IsPatchingSystem Œõ M F]

open IsLocalRing Module.UniformlyBoundedRank

open Pointwise in
instance {R S M : Type*} [CommRing R] [CommRing S] [AddCommGroup M]
    [Module R M] [Module S M] [SMulCommClass S R M] : SMul (Ideal R) (Submodule S M) where
  smul I N := ‚ü®I.toAddSubmonoid ‚Ä¢ N.toAddSubmonoid, by
    intro r
    show I.toAddSubmonoid ‚Ä¢ N.toAddSubmonoid ‚â§
      (I.toAddSubmonoid ‚Ä¢ N.toAddSubmonoid).comap (DistribMulAction.toAddMonoidEnd S M r)
    rw [AddSubmonoid.smul_le]
    intro s hs n hn
    simp only [DistribMulAction.toAddMonoidEnd_apply, AddSubmonoid.mem_comap]
    show r ‚Ä¢ (s ‚Ä¢ n) ‚àà _
    rw [smul_comm]
    exact AddSubmonoid.smul_mem_smul hs (N.smul_mem _ hn)‚ü©

open Pointwise in
lemma Submodule.map_algebraMap_smul {R S M : Type*} [CommRing R] [CommRing S] [AddCommGroup M]
    [Module R M] [Module S M] [Algebra R S] [IsScalarTower R S M] (I : Ideal R)
    (N : Submodule S M) :
    I.map (algebraMap R S) ‚Ä¢ N = I ‚Ä¢ N := by
  apply le_antisymm
  ¬∑ rw [Submodule.smul_le]
    intro r hr n hn
    induction hr using Submodule.span_induction with
    | mem x h =>
      obtain ‚ü®x, hx, rfl‚ü© := h
      rw [algebraMap_smul]
      exact AddSubmonoid.smul_mem_smul hx hn
    | zero => exact zero_smul S n ‚ñ∏ zero_mem _
    | add x y hx hy _ _ => rw [add_smul]; exact add_mem ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫
    | smul a x hx _ => exact smul_assoc a x n ‚ñ∏ (I ‚Ä¢ N).smul_mem _ ‚Äπ_‚Ä∫
  ¬∑ show I.toAddSubmonoid ‚Ä¢ N.toAddSubmonoid ‚â§ _
    rw [AddSubmonoid.smul_le]
    intro r hr n hn
    rw [‚Üê algebraMap_smul S (M := M)]
    exact Submodule.smul_mem_smul (Ideal.mem_map_of_mem _ hr) hn

variable [CompactSpace Œõ] [‚àÄ i, IsNoetherianRing (R i)]

omit
  [‚àÄ (i : Œπ), CompactSpace (R i)]
  [‚àÄ (i : Œπ), IsAdicTopology (R i)]
  [‚àÄ (i : Œπ), IsTopologicalRing (R i)]
  [(i : Œπ) ‚Üí TopologicalSpace (R i)]
  [IsLocalRing Œõ]
  [IsNoetherianRing Œõ]
  [NonarchimedeanRing Œõ]
  [T2Space Œõ]
  [Algebra.UniformlyBoundedRank R] in
lemma maximalIdeal_pow_bound_le_smul_top (i) (Œ± : OpenIdeals Œõ) :
    (maximalIdeal (R i) ^ (Nat.card (Œõ ‚ß∏ Œ±.1) ^ bound Œõ M) ‚Ä¢ ‚ä§ :
      Submodule (R i) (M i)) ‚â§ Œ±.1 ‚Ä¢ ‚ä§ := by
  rw [‚Üê Submodule.map_algebraMap_smul Œ±.1]
  let Œ±' := Œ±.1.map (algebraMap Œõ (R i))
  have : Finite (Œõ ‚ß∏ Œ±.1) := AddSubgroup.quotient_finite_of_isOpen _ Œ±.2
  have : Finite (M i ‚ß∏ (Œ±' ‚Ä¢ ‚ä§ : Submodule (R i) (M i))) := by
    have := Module.UniformlyBoundedRank.finite_quotient_smul Œõ M i Œ±.1
    refine (QuotientAddGroup.quotientAddEquivOfEq ?_).toEquiv.finite_iff.mp this
    rw [Submodule.map_algebraMap_smul Œ±.1]
    rfl
  refine le_trans ?_ (IsLocalRing.maximalIdeal_pow_card_smul_top_le (Œ±' ‚Ä¢ ‚ä§))
  apply Submodule.smul_mono (Ideal.pow_le_pow_right ?_) le_rfl
  convert Module.UniformlyBoundedRank.card_quotient_le Œõ M i Œ±.1 using 1
  refine Nat.card_congr (QuotientAddGroup.quotientAddEquivOfEq ?_).toEquiv
  rw [Submodule.map_algebraMap_smul Œ±.1]
  rfl

class PatchingAlgebra.smulData where
  f : OpenIdeals Œõ ‚Üí ‚Ñï
  pow_f_smul_le : ‚àÄ i Œ±, (maximalIdeal (R i) ^ (f Œ±) ‚Ä¢ ‚ä§ : Submodule (R i) (M i)) ‚â§ Œ±.1 ‚Ä¢ ‚ä§
  f_mono : Antitone f


noncomputable
instance IsPatchingSystem.isModuleQuotient [PatchingAlgebra.smulData Œõ R M] (Œ± : OpenIdeals Œõ) (i) :
    Module (R i ‚ß∏ (maximalIdeal (R i) ^ (PatchingAlgebra.smulData.f R M Œ±)))
      (M i ‚ß∏ (Œ±.1 ‚Ä¢ ‚ä§ : Submodule (R i) (M i))) := Module.IsTorsionBySet.module <| by
  rw [Module.isTorsionBySet_quotient_iff]
  intro r x hx
  exact PatchingAlgebra.smulData.pow_f_smul_le _ _ (Submodule.smul_mem_smul hx trivial)

noncomputable
instance IsPatchingSystem.isModuleQuotient' [PatchingAlgebra.smulData Œõ R M]
    (Œ± : OpenIdeals Œõ) (i) :
    Module (R i ‚ß∏ (maximalIdeal (R i) ^ (PatchingAlgebra.smulData.f R M Œ±)))
      (M i ‚ß∏ (Œ±.1 ‚Ä¢ ‚ä§ : Submodule Œõ (M i))) := IsPatchingSystem.isModuleQuotient ..

noncomputable
instance [PatchingAlgebra.smulData Œõ R M] (Œ± : OpenIdeals Œõ) :
    Module (PatchingAlgebra.Component R F (PatchingAlgebra.smulData.f R M Œ±))
      (PatchingModule.Component Œõ M F Œ±.1) := inferInstance

noncomputable
instance [PatchingAlgebra.smulData Œõ R M] : SMul (PatchingAlgebra R F) (PatchingModule Œõ M F) where
  smul x m := ‚ü®fun Œ± ‚Ü¶ x.1 (PatchingAlgebra.smulData.f R M Œ±) ‚Ä¢ m.1 Œ±, by
    intro Œ± Œ≤ h
    dsimp only [LinearMap.coe_restrictScalars]
    have : Œ±.1.toAddSubgroup.FiniteIndex :=
      @AddSubgroup.finiteIndex_of_finite_quotient _ _ _
        (AddSubgroup.quotient_finite_of_isOpen _ Œ±.2)
    let n‚ÇÅ := PatchingAlgebra.smulData.f R M Œ±
    let n‚ÇÇ := PatchingAlgebra.smulData.f R M Œ≤
    rw [‚Üê x.2 (PatchingAlgebra.smulData.f R M Œ±) (PatchingAlgebra.smulData.f R M Œ≤)
      (PatchingAlgebra.smulData.f_mono h),
      ‚Üê m.2 Œ± Œ≤ h]
    generalize m.1 Œ± = m
    generalize x.1 (PatchingAlgebra.smulData.f R M Œ±) = x
    obtain ‚ü®x, rfl‚ü© := UltraProduct.œÄ_surjective x
    show UltraProduct.map _ _ (x ‚Ä¢ _) = _
    obtain ‚ü®m, rfl‚ü© := UltraProduct.œÄ‚Çó_surjective
      (fun i ‚Ü¶ R i ‚ß∏ maximalIdeal (R i) ^ (PatchingAlgebra.smulData.f R M Œ±)) m
    rw [‚Üê map_smul]
    choose x hx using fun i ‚Ü¶ Submodule.Quotient.mk_surjective _ (x i)
    obtain rfl := funext hx
    choose m hm using fun i ‚Ü¶ Submodule.Quotient.mk_surjective _ (m i)
    obtain rfl := funext hm
    rfl‚ü©

set_option synthInstance.maxHeartbeats 0 in
set_option maxHeartbeats 0 in
noncomputable
instance [PatchingAlgebra.smulData Œõ R M] : Module (PatchingAlgebra R F)
    (PatchingModule Œõ M F) where
  one_smul _ := Subtype.ext <| funext fun _ ‚Ü¶ one_smul _ _
  mul_smul _ _ _ := Subtype.ext <| funext fun _ ‚Ü¶ mul_smul _ _ _
  smul_zero _ := Subtype.ext <| funext fun _ ‚Ü¶ smul_zero _
  smul_add _ _ _ := Subtype.ext <| funext fun _ ‚Ü¶ smul_add _ _ _
  add_smul _ _ _ := Subtype.ext <| funext fun _ ‚Ü¶ add_smul _ _ _
  zero_smul r := Subtype.ext <| funext fun Œ± ‚Ü¶
    zero_smul (PatchingAlgebra.Component R F (PatchingAlgebra.smulData.f R M Œ±)) (r.1 Œ±)

instance [PatchingAlgebra.smulData Œõ R M] :
    IsScalarTower Œõ (PatchingAlgebra R F) (PatchingModule Œõ M F) := .of_algebraMap_smul <| by
  intro r m
  refine Subtype.ext (funext fun Œ± ‚Ü¶ ?_)
  obtain ‚ü®x, hx‚ü© := UltraProduct.œÄ‚Çó_surjective (fun _ ‚Ü¶ Œõ) (m.1 Œ±)
  show (algebraMap Œõ (Œ† i, R i ‚ß∏ maximalIdeal (R i) ^
    (PatchingAlgebra.smulData.f R M Œ±)) r) ‚Ä¢ m.1 Œ± = r ‚Ä¢ m.1 Œ±
  rw [‚Üê hx]
  refine UltraProduct.œÄ‚Çó_eq_iff.mpr (.of_forall fun i ‚Ü¶ ?_)
  exact algebraMap_smul (M := M i ‚ß∏ (Œ±.1 ‚Ä¢ ‚ä§ : Submodule (R i) (M i))) (R i) r (x i)

instance [PatchingAlgebra.smulData Œõ R M] : Module.Finite (PatchingAlgebra R F)
    (PatchingModule Œõ M F) :=
  Module.Finite.of_restrictScalars_finite Œõ _ _

noncomputable
instance : PatchingAlgebra.smulData Œõ R M where
  f Œ± := Œ±.1.toAddSubgroup.index ^ bound Œõ M
  pow_f_smul_le i Œ± := maximalIdeal_pow_bound_le_smul_top Œõ R M i Œ±
  f_mono Œ± Œ≤ h := by
    have : Œ±.1.toAddSubgroup.FiniteIndex :=
      @AddSubgroup.finiteIndex_of_finite_quotient _ _ _
        (AddSubgroup.quotient_finite_of_isOpen _ Œ±.2)
    dsimp
    gcongr

variable {R‚ÇÄ M‚ÇÄ : Type*} [CommRing R‚ÇÄ] [AddCommGroup M‚ÇÄ] [Module R‚ÇÄ M‚ÇÄ] [Module.Finite R‚ÇÄ M‚ÇÄ]
variable [IsLocalRing R‚ÇÄ] [IsNoetherianRing R‚ÇÄ]
  [TopologicalSpace R‚ÇÄ] [IsTopologicalRing R‚ÇÄ] [CompactSpace R‚ÇÄ] [IsAdicTopology R‚ÇÄ]
variable [Algebra Œõ R‚ÇÄ] [Module Œõ M‚ÇÄ] [Module.Finite Œõ M‚ÇÄ]
variable (ùî´ : Ideal Œõ)
variable (sR : ‚àÄ i, (R i ‚ß∏ ùî´.map (algebraMap Œõ (R i))) ‚âÉ‚Çê[Œõ] R‚ÇÄ)
variable (sM : ‚àÄ i, (M i ‚ß∏ (ùî´ ‚Ä¢ ‚ä§ : Submodule Œõ (M i))) ‚âÉ‚Çó[Œõ] M‚ÇÄ)

variable {R‚Çí‚Çí : Type*} [CommRing R‚Çí‚Çí] [IsNoetherianRing R‚Çí‚Çí] [IsLocalRing R‚Çí‚Çí] [IsDomain R‚Çí‚Çí]
    [Algebra Œõ R‚Çí‚Çí]
variable [TopologicalSpace R‚Çí‚Çí] [CompactSpace R‚Çí‚Çí] [IsTopologicalRing R‚Çí‚Çí]
    [Algebra.TopologicallyFG ‚Ñ§ R‚Çí‚Çí]
variable [IsLocalHom (algebraMap Œõ R‚Çí‚Çí)]
variable (fR‚Çí‚Çí : ‚àÄ i, R‚Çí‚Çí ‚Üí‚Çê[Œõ] R i)
variable (hfR‚Çí‚Çí : ‚àÄ i, Function.Surjective (fR‚Çí‚Çí i)) (hfR‚Çí‚Çí' : ‚àÄ i, Continuous (fR‚Çí‚Çí i))

variable [IsScalarTower Œõ R‚ÇÄ M‚ÇÄ]
variable [‚àÄ i, Nontrivial (M i)]

noncomputable
instance : PatchingAlgebra.smulData Œõ (fun _ : Œπ ‚Ü¶ R‚ÇÄ) (fun _ ‚Ü¶ M‚ÇÄ) := by
  classical
  suffices ‚àÄ Œ± : OpenIdeals Œõ, ‚àÉ i, (maximalIdeal R‚ÇÄ ^ i ‚Ä¢ ‚ä§ : Submodule R‚ÇÄ M‚ÇÄ) ‚â§ Œ±.1 ‚Ä¢ ‚ä§ by
    refine ‚ü®fun Œ± ‚Ü¶ Nat.find (this Œ±), fun _ Œ± ‚Ü¶ Nat.find_spec (this Œ±),
      fun Œ± Œ≤ h ‚Ü¶ Nat.find_min' (this Œ≤) ((Nat.find_spec (this Œ±)).trans ?_)‚ü©
    rw [‚Üê Submodule.map_algebraMap_smul Œ±.1, ‚Üê Submodule.map_algebraMap_smul Œ≤.1]
    exact (Submodule.smul_mono (Ideal.map_mono h) le_rfl)
  intro Œ±
  rw [‚Üê Submodule.map_algebraMap_smul Œ±.1]
  let Œ±' := Œ±.1.map (algebraMap Œõ R‚ÇÄ)
  have : Finite (Œõ ‚ß∏ Œ±.1) := AddSubgroup.quotient_finite_of_isOpen _ Œ±.2
  have : Module.Finite (Œõ ‚ß∏ Œ±.1) (M‚ÇÄ ‚ß∏ (Œ±.1 ‚Ä¢ ‚ä§ : Submodule Œõ M‚ÇÄ)) :=
    .of_restrictScalars_finite Œõ _ _
  have : Finite (M‚ÇÄ ‚ß∏ (Œ±.1 ‚Ä¢ ‚ä§ : Submodule Œõ M‚ÇÄ)) := Module.finite_of_finite (Œõ ‚ß∏ Œ±.1)
  have : Finite (M‚ÇÄ ‚ß∏ (Œ±' ‚Ä¢ ‚ä§ : Submodule R‚ÇÄ M‚ÇÄ)) := by
    refine (QuotientAddGroup.quotientAddEquivOfEq ?_).toEquiv.finite_iff.mp this
    rw [Submodule.map_algebraMap_smul Œ±.1]
    rfl
  exact ‚ü®_, IsLocalRing.maximalIdeal_pow_card_smul_top_le (Œ±' ‚Ä¢ ‚ä§)‚ü©

include hfR‚Çí‚Çí hfR‚Çí‚Çí' in
omit
  [IsNoetherianRing Œõ] in
lemma PatchingAlgebra.faithfulSMul
    (H‚ÇÄ : ringKrullDim R‚Çí‚Çí < ‚ä§)
    (H : .some (Module.depth Œõ Œõ) = ringKrullDim R‚Çí‚Çí) :
    FaithfulSMul (PatchingAlgebra R F) (PatchingModule Œõ M F) := by
  let f := PatchingAlgebra.lift R F (fun i ‚Ü¶ (fR‚Çí‚Çí i).toRingHom)
  have hf : Function.Surjective f :=
    lift_surjective R F _ hfR‚Çí‚Çí' hfR‚Çí‚Çí
  have hf' (r) : f (algebraMap Œõ _ r) = algebraMap Œõ _ r := by
    refine Subtype.ext (funext fun k ‚Ü¶ UltraProduct.œÄ_eq_iff.mpr (.of_forall fun i ‚Ü¶ ?_))
    simp
  letI := f.toAlgebra
  letI := Module.compHom (PatchingModule Œõ M F) f
  suffices FaithfulSMul R‚Çí‚Çí (PatchingModule Œõ M F) by
    refine ‚ü®fun {x‚ÇÅ x‚ÇÇ} H ‚Ü¶ ?_‚ü©
    obtain ‚ü®x‚ÇÅ, rfl‚ü© := hf x‚ÇÅ
    obtain ‚ü®x‚ÇÇ, rfl‚ü© := hf x‚ÇÇ
    obtain rfl : x‚ÇÅ = x‚ÇÇ := FaithfulSMul.eq_of_smul_eq_smul H
    rfl
  have : Nontrivial (PatchingModule Œõ M F) := by
    by_contra H
    rw [not_nontrivial_iff_subsingleton] at H
    obtain ‚ü®i, ‚ü®e‚ü©‚ü© := (Module.UniformlyBoundedRank.rank_spec Œõ M F).exists
    have := PatchingModule.rank_patchingModule Œõ M F
    simp only [rank_subsingleton', @eq_comm Cardinal 0, Nat.cast_eq_zero] at this
    have : Subsingleton (Fin (rank Œõ M F) ‚Üí Œõ ‚ß∏ Module.annihilator Œõ (M i)) := by
      rw [this]
      infer_instance
    exact not_subsingleton _ e.subsingleton
  have : IsScalarTower Œõ R‚Çí‚Çí (PatchingModule Œõ M F) := .of_algebraMap_smul <| by
    intro r m
    conv_rhs => rw [‚Üê IsScalarTower.algebraMap_smul (PatchingAlgebra R F), ‚Üê hf']
    rfl
  have : Module.Finite R‚Çí‚Çí (PatchingModule Œõ M F) :=
    Module.Finite.of_restrictScalars_finite Œõ _ _
  apply Module.faithfulSMul_of_depth_eq_ringKrullDim _ _ H‚ÇÄ
  refine le_antisymm (Module.depth_le_dim _ _) ?_
  have : Module.depth Œõ Œõ ‚â§ Module.depth R‚Çí‚Çí (PatchingModule Œõ M F) :=
    (Module.depth_le_of_free _ _).trans (Module.depth_of_isScalarTower Œõ _ _)
  rwa [‚Üê H, WithBot.coe_le_coe]

lemma Ultrafilter.eventually_eventually_eq_of_finite
    {Œ± Œ≤ : Type*} [Finite Œ≤] (F : Ultrafilter Œ±) (f : Œ± ‚Üí Œ≤) :
    ‚àÄ·∂† (i) (j) in F, f i = f j := by
  obtain ‚ü®a, ha‚ü© : ‚àÉ a, ‚àÄ·∂† i in F, f i = a := Ultrafilter.eventually_exists_iff.mp (by simp)
  filter_upwards [ha] with i hi
  filter_upwards [ha] with j hj
  rw [hi, hj]

lemma IsLocalRing.map_maximalIdeal {R S} [CommRing R] [CommRing S]
    [IsLocalRing R] [IsLocalRing S] (f : R ‚Üí+* S) (hf : Function.Surjective f) :
    (maximalIdeal R).map f = maximalIdeal S := by
  have := (IsLocalRing.local_hom_TFAE f).out 0 4
  rw [‚Üê this.mp (by exact .of_surjective f hf), Ideal.map_comap_of_surjective f hf]

omit
  [‚àÄ (i : Œπ), TopologicalSpace (R i)]
  [‚àÄ (i : Œπ), IsTopologicalRing (R i)]
  [‚àÄ (i : Œπ), CompactSpace (R i)]
  [‚àÄ (i : Œπ), IsAdicTopology (R i)]
  [IsLocalRing Œõ]
  [IsNoetherianRing Œõ]
  [NonarchimedeanRing Œõ]
  [T2Space Œõ]
  [Algebra.UniformlyBoundedRank R]
  [IsPatchingSystem Œõ M ‚ÜëF]
  [Module.Finite R‚ÇÄ M‚ÇÄ]
  [TopologicalSpace R‚ÇÄ]
  [IsTopologicalRing R‚ÇÄ]
  [CompactSpace R‚ÇÄ]
  [IsAdicTopology R‚ÇÄ]
  [‚àÄ (i : Œπ), Nontrivial (M i)] in
lemma smul_lemma‚ÇÄ
    (HCompat : ‚àÄ i m (r : R i), sM i (Submodule.Quotient.mk (r ‚Ä¢ m)) =
      sR i (Ideal.Quotient.mk _ r) ‚Ä¢ sM i (Submodule.Quotient.mk m))
    (x : PatchingModule Œõ M F)
    (m : PatchingAlgebra R F)
    [‚àÄ (i : Œπ), IsLocalHom (Ideal.Quotient.mk (ùî´.map (algebraMap Œõ (R i))))] :
    PatchingModule.map Œõ F (fun i ‚Ü¶ (sM i).toLinearMap.comp (ùî´ ‚Ä¢ ‚ä§ : Submodule Œõ (M i)).mkQ)
      (m ‚Ä¢ x) =
      PatchingAlgebra.map F (fun i ‚Ü¶ (sR i).toRingHom.comp
        (Ideal.Quotient.mk (Ideal.map (algebraMap Œõ (R i)) ùî´))) m ‚Ä¢
        PatchingModule.map Œõ F (fun i ‚Ü¶ (sM i).toLinearMap.comp
          (ùî´ ‚Ä¢ ‚ä§ : Submodule Œõ (M i)).mkQ) x := by
  refine Subtype.ext (funext fun Œ± ‚Ü¶ ?_)
  obtain ‚ü®x, hx‚ü© := x
  obtain ‚ü®m, hm‚ü© := m
  obtain ‚ü®x, rfl‚ü© := PatchingModule.ofPi_surjective x
  obtain ‚ü®m, rfl‚ü© := PatchingAlgebra.ofPi_surjective m
  replace hm (i j h) := hm i j h
  simp only [PatchingAlgebra.ofPi_apply, UltraProduct.mapRingHom_œÄ, Ideal.quotientMap_mk,
    RingHom.id_apply, UltraProduct.œÄ_eq_iff] at hm
  let n‚ÇÄ := PatchingAlgebra.smulData.f (fun _ : Œπ ‚Ü¶ R‚ÇÄ) (fun _ ‚Ü¶ M‚ÇÄ) Œ±
  let n‚ÇÅ := @PatchingAlgebra.smulData.f Œõ _ _ R _ inferInstance _ M _ _ _ inferInstance _
    inferInstance Œ±
  show UltraProduct.œÄ‚Çó _ _ _ _ = UltraProduct.œÄ‚Çó (fun _ ‚Ü¶ R‚ÇÄ)
    (fun _ ‚Ü¶ M‚ÇÄ ‚ß∏ (Œ±.1 ‚Ä¢ ‚ä§ : Submodule R‚ÇÄ M‚ÇÄ)) _ _
  refine UltraProduct.œÄ‚Çó_eq_iff.mpr ?_
  filter_upwards [hm n‚ÇÄ (min n‚ÇÄ n‚ÇÅ) (min_le_left _ _), hm n‚ÇÅ (min n‚ÇÄ n‚ÇÅ) (min_le_right _ _)] with
    i hi‚ÇÅ hi‚ÇÇ
  let F := (sR i).toRingHom.comp (Ideal.Quotient.mk _)
  have hF : Function.Surjective F := (sR i).surjective.comp Ideal.Quotient.mk_surjective
  have H : (maximalIdeal R‚ÇÄ ^ (n‚ÇÄ ‚äì n‚ÇÅ) ‚Ä¢ ‚ä§ : Submodule R‚ÇÄ M‚ÇÄ) ‚â§ Œ±.1 ‚Ä¢ ‚ä§ := by
    obtain h | h := le_total n‚ÇÄ n‚ÇÅ
    ¬∑ rw [min_eq_left h]; exact PatchingAlgebra.smulData.pow_f_smul_le i Œ±
    ¬∑ letI := F.toAlgebra
      letI := Module.compHom M‚ÇÄ F
      have : IsScalarTower (R i) R‚ÇÄ M‚ÇÄ := .of_algebraMap_smul fun _ _ ‚Ü¶ rfl
      have : IsScalarTower Œõ (R i) R‚ÇÄ := .of_algebraMap_eq' (sR i).toAlgHom.comp_algebraMap.symm
      let l : M i ‚Üí‚Çó[R i] M‚ÇÄ :=
        { __ := (sM i).toLinearMap.comp (Submodule.mkQ _), map_smul' := fun _ _ ‚Ü¶ HCompat _ _ _ }
      have hl : LinearMap.range l = ‚ä§ :=
        LinearMap.range_eq_top.mpr ((sM i).surjective.comp (Submodule.mkQ_surjective _))
      rw [min_eq_right h, ‚Üê IsLocalRing.map_maximalIdeal F hF, ‚Üê Ideal.map_pow]
      have : maximalIdeal (R i) ^ n‚ÇÅ ‚Ä¢ ‚ä§ ‚â§ _ := PatchingAlgebra.smulData.pow_f_smul_le i Œ±
      replace this := Submodule.map_mono (f := l) this
      rw [Submodule.map_smul'', ‚Üê Submodule.map_algebraMap_smul (R := Œõ),
        Submodule.map_smul'', Submodule.map_top, hl] at this
      replace this : (maximalIdeal (R i) ^ n‚ÇÅ ‚Ä¢ ‚ä§ : Submodule R‚ÇÄ M‚ÇÄ) ‚â§
        Œ±.1.map (algebraMap Œõ (R i)) ‚Ä¢ ‚ä§ := this
      rwa [‚Üê Submodule.map_algebraMap_smul, ‚Üê Submodule.map_algebraMap_smul (R := R i),
        Ideal.map_map, ‚Üê IsScalarTower.algebraMap_eq,
        Submodule.map_algebraMap_smul (R := Œõ)] at this
  refine (Submodule.Quotient.eq _).mpr ?_
  dsimp
  rw [HCompat, ‚Üê sub_smul, ‚Üê map_sub, ‚Üê map_sub]
  show F (m n‚ÇÅ i - m n‚ÇÄ i) ‚Ä¢ sM i _ ‚àà _
  apply H
  refine Submodule.smul_mem_smul ?_ trivial
  rw [‚Üê Ideal.mem_comap]
  refine SetLike.le_def.mp ?_ ((Ideal.Quotient.mk_eq_mk_iff_sub_mem _ _).mp (hi‚ÇÇ.trans hi‚ÇÅ.symm))
  rw [‚Üê Ideal.map_le_iff_le_comap, Ideal.map_pow, ‚Üê IsLocalRing.map_maximalIdeal F hF]

omit [NonarchimedeanRing Œõ] [Module.Finite R‚ÇÄ M‚ÇÄ] in
lemma smul_lemma‚ÇÅ
    (x : M‚ÇÄ)
    (m : R‚ÇÄ) :
    (PatchingModule.constEquiv Œõ F M‚ÇÄ) (m ‚Ä¢ x) =
    (PatchingAlgebra.constEquiv F R‚ÇÄ) m ‚Ä¢ (PatchingModule.constEquiv Œõ F M‚ÇÄ) x := rfl

omit
  [‚àÄ (i : Œπ), CompactSpace (R i)]
  [‚àÄ (i : Œπ), IsAdicTopology (R i)]
  [Algebra.UniformlyBoundedRank R]
  [IsPatchingSystem Œõ M ‚ÜëF]
  [Module.Finite R‚ÇÄ M‚ÇÄ]
  [‚àÄ (i : Œπ), Nontrivial (M i)]
  [‚àÄ (i : Œπ), IsTopologicalRing (R i)]
  [(i : Œπ) ‚Üí TopologicalSpace (R i)] in
lemma smul_lemma
    (HCompat : ‚àÄ i m (r : R i), sM i (Submodule.Quotient.mk (r ‚Ä¢ m)) =
      sR i (Ideal.Quotient.mk _ r) ‚Ä¢ sM i (Submodule.Quotient.mk m))
    (m : PatchingAlgebra R F)
      (x : PatchingModule Œõ M F ‚ß∏ (ùî´ ‚Ä¢ ‚ä§ : Submodule (PatchingAlgebra R F)
      (PatchingModule Œõ M F))) :
      PatchingModule.quotientEquivOver Œõ M F ùî´ sM (m ‚Ä¢ x) =
      ((PatchingAlgebra.quotientToOver Œõ R F ùî´ sR).comp (Ideal.Quotient.mk _)) m ‚Ä¢
       PatchingModule.quotientEquivOver Œõ M F ùî´ sM x := by
  obtain ‚ü®x, rfl‚ü© := Submodule.Quotient.mk_surjective _ x
  apply (PatchingModule.constEquiv Œõ F M‚ÇÄ).injective
  refine ((PatchingModule.constEquiv Œõ F M‚ÇÄ).apply_symm_apply _).trans ?_
  haveI (i) : Nontrivial (R i ‚ß∏ Ideal.map (algebraMap Œõ (R i)) ùî´) :=
    (sR i).toRingHom.domain_nontrivial
  have (i) : IsLocalHom (Ideal.Quotient.mk (ùî´.map (algebraMap Œõ (R i)))) :=
    .of_surjective _ (Ideal.Quotient.mk_surjective)
  convert smul_lemma‚ÇÄ Œõ R M F ùî´ sR sM HCompat x m
  ¬∑ obtain ‚ü®x, hx‚ü© := x
    obtain ‚ü®m, hm‚ü© := m
    obtain ‚ü®x, rfl‚ü© := PatchingModule.ofPi_surjective x
    obtain ‚ü®m, rfl‚ü© := PatchingAlgebra.ofPi_surjective m
    rfl
  rw [smul_lemma‚ÇÅ]
  congr 1
  ¬∑ refine ((PatchingAlgebra.constEquiv F R‚ÇÄ).apply_symm_apply _).trans ?_
    obtain ‚ü®m, hm‚ü© := m
    obtain ‚ü®m, rfl‚ü© := PatchingAlgebra.ofPi_surjective m
    rfl
  ¬∑ refine ((PatchingModule.constEquiv Œõ F M‚ÇÄ).apply_symm_apply _).trans ?_
    obtain ‚ü®x, hx‚ü© := x
    obtain ‚ü®x, rfl‚ü© := PatchingModule.ofPi_surjective x
    rfl

include Œõ R M F fR‚Çí‚Çí hfR‚Çí‚Çí hfR‚Çí‚Çí' sR sM in
omit
  [Module.Finite R‚ÇÄ M‚ÇÄ]
  [Module.Finite Œõ M‚ÇÄ] in
lemma support_eq_top
    (HCompat : ‚àÄ i m (r : R i), sM i (Submodule.Quotient.mk (r ‚Ä¢ m)) =
      sR i (Ideal.Quotient.mk _ r) ‚Ä¢ sM i (Submodule.Quotient.mk m))
    (H‚ÇÄ : ringKrullDim R‚Çí‚Çí < ‚ä§)
    (H : .some (Module.depth Œõ Œõ) = ringKrullDim R‚Çí‚Çí) : Module.support R‚ÇÄ M‚ÇÄ = Set.univ := by
  have : Module.Finite Œõ M‚ÇÄ := by
    cases isEmpty_or_nonempty Œπ
    ¬∑ cases F.neBot.1 (Subsingleton.elim _ _)
    have i := Nonempty.some (inferInstanceAs (Nonempty Œπ))
    exact Module.Finite.equiv (sM i)
  have : Module.Finite R‚ÇÄ M‚ÇÄ := .of_restrictScalars_finite Œõ _ _
  have := PatchingAlgebra.faithfulSMul Œõ R M F fR‚Çí‚Çí hfR‚Çí‚Çí hfR‚Çí‚Çí' H‚ÇÄ H
  rw [Module.support_eq_zeroLocus, ‚Üê Set.univ_subset_iff]
  intro p hp
  let f‚ÇÄ := ((PatchingAlgebra.quotientToOver Œõ R F ùî´ sR).comp (Ideal.Quotient.mk _))
  have hf‚ÇÄ : Function.Surjective f‚ÇÄ :=
    (PatchingAlgebra.surjective_quotientToOver Œõ R F ùî´ sR).comp Ideal.Quotient.mk_surjective
  let p' := PrimeSpectrum.comap f‚ÇÄ p
  have hp' : ùî´.map (algebraMap _ _) ‚â§ p'.asIdeal := by
    simp only [PrimeSpectrum.comap_comp, ContinuousMap.comp_apply,
      PrimeSpectrum.comap_asIdeal, p', f‚ÇÄ]
    refine le_trans ?_ (Ideal.comap_mono (f := Ideal.Quotient.mk _) bot_le)
    rw [‚Üê RingHom.ker_eq_comap_bot, Ideal.mk_ker]
  let inst := Module.compHom M‚ÇÄ f‚ÇÄ
  letI := f‚ÇÄ.toAlgebra
  have : IsScalarTower (PatchingAlgebra R F) R‚ÇÄ M‚ÇÄ := .of_algebraMap_smul fun _ _ ‚Ü¶ rfl
  let e' : (PatchingModule Œõ M F ‚ß∏ (ùî´ ‚Ä¢ ‚ä§ : Submodule (PatchingAlgebra R F) (PatchingModule Œõ M F)))
    ‚âÉ‚Çó[PatchingAlgebra R F] M‚ÇÄ :=
    { __ := (PatchingModule.quotientEquivOver Œõ M F ùî´ sM),
      map_smul' := smul_lemma Œõ R M F ùî´ sR sM HCompat }
  have := congr(PrimeSpectrum.zeroLocus (R := PatchingAlgebra R F) ‚Üë($(e'.annihilator_eq)))
  rw [‚Üê Submodule.map_algebraMap_smul, ‚Üê Module.support_eq_zeroLocus,
    Module.support_quotient,  Module.support_eq_zeroLocus,
    Module.annihilator_eq_bot.mpr inferInstance, ‚Üê Module.comap_annihilator (R := R‚ÇÄ),
    ‚Üê PrimeSpectrum.image_comap_zeroLocus_eq_zeroLocus_comap _ _ (by exact hf‚ÇÄ)] at this
  simp only [Submodule.bot_coe, PrimeSpectrum.zeroLocus_singleton_zero, Set.univ_inter] at this
  exact (PrimeSpectrum.comap_injective_of_surjective _ hf‚ÇÄ).mem_set_image.mp (this.le hp')
