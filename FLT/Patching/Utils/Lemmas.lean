import Mathlib.RingTheory.Artinian.Ring
import Mathlib.RingTheory.Filtration
import Mathlib.RingTheory.Localization.Finiteness
import Mathlib.RingTheory.Nakayama
import Mathlib.RingTheory.Spectrum.Prime.Topology
import Mathlib.RingTheory.Support
import Mathlib.Topology.Algebra.Module.Compact
import Mathlib.Topology.Algebra.Module.ModuleTopology
import Mathlib.Topology.Algebra.OpenSubgroup
import Mathlib.Topology.Algebra.Ring.Ideal
import Mathlib.Topology.Separation.Profinite

lemma IsUnit.pi_iff {Œπ} {M : Œπ ‚Üí Type*} [‚àÄ i, Monoid (M i)] {x : Œ† i, M i} :
    IsUnit x ‚Üî ‚àÄ i, IsUnit (x i) := by
  simp_rw [isUnit_iff_exists, funext_iff, ‚Üê forall_and]
  exact Classical.skolem (p := fun i y ‚Ü¶ x i * y = 1 ‚àß y * x i = 1).symm

lemma forall_prod_iff {Œπ} {Œ≤ : Œπ ‚Üí Type*} (P : ‚àÄ i, Œ≤ i ‚Üí Prop) [‚àÄ i, Nonempty (Œ≤ i)]:
    (‚àÄ i : Œπ, ‚àÄ (y : Œ† i, Œ≤ i), P i (y i)) ‚Üî (‚àÄ i y, P i y) :=
  letI := Classical.decEq
  ‚ü®fun H i y ‚Ü¶ by simpa using H i (fun j ‚Ü¶ if h : i = j then h ‚ñ∏ y else
    Nonempty.some inferInstance), fun H i y ‚Ü¶ H _ _‚ü©

@[simps]
def Ideal.idealQuotientEquiv {R : Type*} [CommRing R] (I : Ideal R) :
  Ideal (R ‚ß∏ I) ‚âÉ { J // I ‚â§ J } where
    toFun J := ‚ü®J.comap (Ideal.Quotient.mk I),
      (I.mk_ker : _).symm.trans_le (Ideal.comap_mono bot_le)‚ü©
    invFun J := J.1.map (Ideal.Quotient.mk I)
    left_inv J := map_comap_of_surjective _ Quotient.mk_surjective _
    right_inv J := by
      ext1
      simpa [comap_map_of_surjective _ Quotient.mk_surjective,
        ‚Üê RingHom.ker_eq_comap_bot] using J.2

set_option autoImplicit false
variable {Œπ : Type*} {R M : Œπ ‚Üí Type*} [‚àÄ i, CommRing (R i)] [‚àÄ i, AddCommGroup (M i)]
variable [‚àÄ i, Module (R i) (M i)]
variable (I : ‚àÄ i, Ideal (R i)) (N : ‚àÄ i, Submodule (R i) (M i))

def Submodule.pi' : Submodule (Œ† i, R i) (Œ† i, M i) where
  carrier := { x | ‚àÄ i, x i ‚àà N i }
  add_mem' := by aesop
  zero_mem' := by aesop
  smul_mem' := by aesop

variable {N} in
@[simp]
lemma Submodule.mem_pi' {x} : x ‚àà Submodule.pi' N ‚Üî ‚àÄ i, x i ‚àà N i := Iff.rfl

variable {N : Œπ ‚Üí Type*} [‚àÄ i, AddCommGroup (N i)] [‚àÄ i, Module (R i) (N i)] in
@[simps]
def LinearMap.piMap (f : ‚àÄ i, M i ‚Üí‚Çó[R i] N i) : (Œ† i, M i) ‚Üí‚Çó[Œ† i, R i] Œ† i, N i where
  toFun g i := f i (g i)
  map_add' := by aesop
  map_smul' := by aesop

instance {Œπ : Type*} {R A : Œπ ‚Üí Type*} [‚àÄ i, CommSemiring (R i)]
    [‚àÄ i, Semiring (A i)] [‚àÄ i, Algebra (R i) (A i)] : Algebra (Œ† i, R i) (Œ† i, A i) where
  algebraMap := Pi.ringHom fun i ‚Ü¶ (algebraMap (R i) (A i)).comp (Pi.evalRingHom R i)
  commutes' r a := funext fun i ‚Ü¶ Algebra.commutes _ _
  smul_def' r a := funext fun i ‚Ü¶ by simp [Algebra.smul_def]

lemma pi'_jacobson :
    Submodule.pi' (fun i ‚Ü¶ Ideal.jacobson (R := R i) ‚ä•) = Ideal.jacobson ‚ä• := by
  ext v
  simp only [Submodule.mem_pi', Ideal.mem_jacobson_bot, IsUnit.pi_iff]
  conv_rhs => rw [forall_comm]
  exact (forall_prod_iff (fun i y ‚Ü¶ IsUnit (v i * y + 1))).symm

instance {R} [CommRing R] [TopologicalSpace R] [CompactSpace R] (I : Ideal R) :
    CompactSpace (R ‚ß∏ I) :=
  Quotient.compactSpace

open Topology in
@[to_additive]
lemma IsTopologicalGroup.isInducing_of_nhds_one {G H : Type*} [Group G] [Group H]
    [TopologicalSpace G] [TopologicalSpace H]
    [IsTopologicalGroup G] [IsTopologicalGroup H] (f : G ‚Üí* H)
    (hf : ùìù (1 : G) = (ùìù (1 : H)).comap f) : Topology.IsInducing f := by
  rw [Topology.isInducing_iff_nhds]
  intro x
  rw [‚Üê nhds_translation_mul_inv, ‚Üê nhds_translation_mul_inv (f x), Filter.comap_comap, hf,
    Filter.comap_comap]
  congr 1
  ext; simp

open Topology in
@[to_additive]
theorem exists_subgroup_isOpen_and_subset {Œ± : Type*} [TopologicalSpace Œ±]
    [CompactSpace Œ±] [T2Space Œ±] [TotallyDisconnectedSpace Œ±]
    [CommGroup Œ±] [IsTopologicalGroup Œ±] {U : Set Œ±} (hU : U ‚àà ùìù 1) :
    ‚àÉ G : Subgroup Œ±, IsOpen (X := Œ±) G ‚àß (G : Set Œ±) ‚äÜ U := by
  obtain ‚ü®V, hVU, hV, h1V‚ü© := mem_nhds_iff.mp hU
  obtain ‚ü®K, hK, hxK, hKU‚ü© := compact_exists_isClopen_in_isOpen hV h1V
  obtain ‚ü®‚ü®G, hG‚ü©, hG'‚ü© := IsTopologicalGroup.exist_openSubgroup_sub_clopen_nhd_of_one hK hxK
  exact ‚ü®G, hG, (hG'.trans hKU).trans hVU‚ü©

@[simp]
theorem TwoSidedIdeal.span_le {Œ±} [NonUnitalNonAssocRing Œ±] {s : Set Œ±} {I : TwoSidedIdeal Œ±} :
    span s ‚â§ I ‚Üî s ‚äÜ I :=
  ‚ü®subset_span.trans, fun h _ hx ‚Ü¶ mem_span_iff.mp hx I h‚ü©

@[simp]
theorem TwoSidedIdeal.span_neg {Œ±} [NonUnitalNonAssocRing Œ±] (s : Set Œ±) :
    TwoSidedIdeal.span (-s) = TwoSidedIdeal.span s := by
  apply le_antisymm <;> rw [span_le]
  ¬∑ rintro x hx
    exact neg_neg x ‚ñ∏ neg_mem _ (subset_span (s := s) hx)
  ¬∑ rintro x hx
    exact neg_neg x ‚ñ∏ neg_mem _ (subset_span (Set.neg_mem_neg.mpr hx))

@[simp]
theorem TwoSidedIdeal.span_singleton_zero {Œ±} [NonUnitalNonAssocRing Œ±] :
    span {(0 : Œ±)} = ‚ä• :=
  le_bot_iff.mp (span_le.mpr (by simp))

theorem TwoSidedIdeal.mem_span_singleton {Œ±} [NonUnitalNonAssocRing Œ±] {x : Œ±} :
    x ‚àà span {x} :=
  subset_span rfl

def TwoSidedIdeal.leAddSubgroup {Œ±} [NonUnitalNonAssocRing Œ±] (G : AddSubgroup Œ±) :
    TwoSidedIdeal Œ± :=
  .mk'
    { x | (span {x} : Set Œ±) ‚äÜ G }
    (by simp [Set.subset_def, G.zero_mem])
    (fun {x y} hx hy ‚Ü¶ by
      have : span {x + y} ‚â§ span {x} ‚äî span {y} :=
        span_le.mpr <| Set.singleton_subset_iff.mpr <|
          mem_sup.mpr ‚ü®x, mem_span_singleton, y, mem_span_singleton, rfl‚ü©
      refine subset_trans (c := (G : Set Œ±)) this fun a ha ‚Ü¶ ?_
      obtain ‚ü®a‚ÇÅ, ha‚ÇÅ, a‚ÇÇ, ha‚ÇÇ, rfl‚ü© := mem_sup.mp ha
      exact G.add_mem (hx ha‚ÇÅ) (hy ha‚ÇÇ))
    (fun {x} hx ‚Ü¶ by simpa only [Set.mem_setOf_eq, ‚Üê Set.neg_singleton, TwoSidedIdeal.span_neg])
    (fun {x y} hy ‚Ü¶ subset_trans (c := (G : Set Œ±))
      (TwoSidedIdeal.span_le.mpr <| by
        simpa using TwoSidedIdeal.mul_mem_left _ x y mem_span_singleton) hy)
    (fun {x y} hy ‚Ü¶ subset_trans (c := (G : Set Œ±))
      (TwoSidedIdeal.span_le.mpr <| by
        simpa using TwoSidedIdeal.mul_mem_right _ x y mem_span_singleton) hy)

lemma TwoSidedIdeal.leAddSubgroup_subset {Œ±} [NonUnitalNonAssocRing Œ±] (G : AddSubgroup Œ±) :
    (leAddSubgroup G : Set Œ±) ‚äÜ G :=
  fun x hx ‚Ü¶ hx ((sub_zero x).symm ‚ñ∏ mem_span_singleton)

lemma TwoSidedIdeal.mem_leAddSubgroup' {Œ±} [NonUnitalNonAssocRing Œ±] {G : AddSubgroup Œ±} {x : Œ±} :
    x ‚àà leAddSubgroup G ‚Üî (span {x} : Set Œ±) ‚äÜ G := by
  conv_rhs => rw [‚Üê sub_zero x]
  rfl

lemma TwoSidedIdeal.mem_leAddSubgroup {Œ±} [Ring Œ±] {G : AddSubgroup Œ±} {x : Œ±} :
    x ‚àà leAddSubgroup G ‚Üî ‚àÄ a b, a * x * b ‚àà G := by
  constructor
  ¬∑ intro hx a b
    exact hx (mul_mem_right _ _ _ (mul_mem_left _ _ _ ((sub_zero x).symm ‚ñ∏ mem_span_singleton)))
  ¬∑ intro H a ha
    simpa using mem_span_iff.mp ha (.mk' { x | ‚àÄ a b, a * x * b ‚àà G }
      (by simp [G.zero_mem]) (by simp +contextual [mul_add, add_mul, G.add_mem])
      (by simp) (fun {x y} ‚Ü¶ by simp +contextual [‚Üê mul_assoc _ x y])
      (fun {x y} ‚Ü¶ by simp +contextual [mul_assoc])) (by simpa) 1 1

open Topology Pointwise in
theorem exists_twoSidedIdeal_isOpen_and_subset {Œ±} [TopologicalSpace Œ±]
    [CompactSpace Œ±] [T2Space Œ±] [TotallyDisconnectedSpace Œ±]
    [Ring Œ±] [IsTopologicalRing Œ±] {U : Set Œ±} (hU : U ‚àà ùìù 0) :
    ‚àÉ I : TwoSidedIdeal Œ±, IsOpen (X := Œ±) I ‚àß (I : Set Œ±) ‚äÜ U := by
  obtain ‚ü®G, hG, hGU‚ü© := exists_addSubgroup_isOpen_and_subset hU
  refine ‚ü®_, isOpen_iff_mem_nhds.mpr ?_, (TwoSidedIdeal.leAddSubgroup_subset G).trans hGU‚ü©
  intro x hx
  replace hx := TwoSidedIdeal.mem_leAddSubgroup.mp hx
  suffices
    ‚àÄ s t, IsCompact s ‚Üí IsCompact t ‚Üí
      ‚àÉ V ‚àà ùìù x, ‚àÄ a ‚àà s, ‚àÄ b ‚àà V, ‚àÄ c ‚àà t, a * b * c ‚àà G by
    obtain ‚ü®V, hV, H‚ü© := this Set.univ Set.univ isCompact_univ isCompact_univ
    refine (ùìù x).mem_of_superset hV fun b hb ‚Ü¶ ?_
    replace H := fun a c ‚Ü¶ H a trivial b hb c trivial
    simpa [TwoSidedIdeal.mem_leAddSubgroup]
  intros s t hs ht
  refine hs.induction_on ?_ ?_ ?_ ?_
  ¬∑ simp only [Set.mem_empty_iff_false, IsEmpty.forall_iff, implies_true, and_true]
    exact ‚ü®Set.univ, Filter.univ_mem‚ü©
  ¬∑ rintro s‚ÇÅ s‚ÇÇ hs‚ÇÅs‚ÇÇ ‚ü®V, hV, H‚ü©
    exact ‚ü®V, hV, fun a ha b hb c hc ‚Ü¶ H a (hs‚ÇÅs‚ÇÇ ha) b hb c hc‚ü©
  ¬∑ rintro s‚ÇÅ s‚ÇÇ ‚ü®V‚ÇÅ, hV‚ÇÅ, H‚ÇÅ‚ü© ‚ü®V‚ÇÇ, hV‚ÇÇ, H‚ÇÇ‚ü©
    exact ‚ü®V‚ÇÅ ‚à© V‚ÇÇ, Filter.inter_mem hV‚ÇÅ hV‚ÇÇ,
      fun a ha b hb c hc ‚Ü¶ ha.elim (H‚ÇÅ a ¬∑ b hb.1 c hc) (H‚ÇÇ a ¬∑ b hb.2 c hc)‚ü©
  intro a has
  refine ht.induction_on ?_ ?_ ?_ ?_
  ¬∑ simp only [Set.mem_empty_iff_false, IsEmpty.forall_iff, implies_true, and_true,
      exists_and_right]
    exact ‚ü®‚ü®_, Filter.univ_mem‚ü©, ‚ü®_, Filter.univ_mem‚ü©‚ü©
  ¬∑ rintro s‚ÇÅ s‚ÇÇ hs‚ÇÅs‚ÇÇ ‚ü®V, hV, U, hU, H‚ü©
    exact ‚ü®V, hV, U, hU, fun a ha b hb c hc ‚Ü¶ H a ha b hb c (hs‚ÇÅs‚ÇÇ hc)‚ü©
  ¬∑ rintro s‚ÇÅ s‚ÇÇ ‚ü®V‚ÇÅ, hV‚ÇÅ, U‚ÇÅ, hU‚ÇÅ, H‚ÇÅ‚ü© ‚ü®V‚ÇÇ, hV‚ÇÇ, U‚ÇÇ, hU‚ÇÇ, H‚ÇÇ‚ü©
    exact ‚ü®V‚ÇÅ ‚à© V‚ÇÇ, Filter.inter_mem hV‚ÇÅ hV‚ÇÇ, U‚ÇÅ ‚à© U‚ÇÇ, Filter.inter_mem hU‚ÇÅ hU‚ÇÇ,
      fun a ha b hb c hc ‚Ü¶ hc.elim (H‚ÇÅ a ha.1 b hb.1 c) (H‚ÇÇ a ha.2 b hb.2 c)‚ü©
  ¬∑ intros b hbt
    have : Continuous fun p : Œ± √ó Œ± √ó Œ± ‚Ü¶ p.1 * p.2.1 * p.2.2 := by fun_prop
    have := (this.tendsto (a, x, b)) (hG.mem_nhds (hx _ _))
    simp only [nhds_prod_eq, Filter.mem_map, Filter.mem_prod_iff] at this
    obtain ‚ü®t‚ÇÅ, ht‚ÇÅ, T, ‚ü®t‚ÇÇ, ht‚ÇÇ, t‚ÇÉ, ht‚ÇÉ, hT‚ü©, H‚ü© := this
    refine ‚ü®t‚ÇÉ, mem_nhdsWithin_of_mem_nhds ht‚ÇÉ, t‚ÇÅ, mem_nhdsWithin_of_mem_nhds ht‚ÇÅ,
      t‚ÇÇ, ht‚ÇÇ, fun a ha b hb c hc ‚Ü¶ ?_‚ü©
    exact H (Set.mk_mem_prod ha (hT <| Set.mk_mem_prod hb hc))

open Topology in
theorem exists_ideal_isOpen_and_subset {Œ±} [TopologicalSpace Œ±]
    [CompactSpace Œ±] [T2Space Œ±] [TotallyDisconnectedSpace Œ±]
    [Ring Œ±] [IsTopologicalRing Œ±] {U : Set Œ±} (hU : U ‚àà ùìù 0) :
    ‚àÉ I : Ideal Œ±, IsOpen (X := Œ±) I ‚àß (I : Set Œ±) ‚äÜ U := by
  obtain ‚ü®I, hI, hIU‚ü© := exists_twoSidedIdeal_isOpen_and_subset hU
  exact ‚ü®I.asIdeal, hI, hIU‚ü©

instance (priority := 100) {Œ±} [TopologicalSpace Œ±] [DiscreteTopology Œ±] :
    TotallyDisconnectedSpace Œ± :=
  ‚ü®fun s _ hs x hxs y hys ‚Ü¶ not_not.mp fun hxy ‚Ü¶ by
    simpa using hs _ _ (isOpen_discrete {y}) (isOpen_discrete (s \ {y}))
      (by simp) ‚ü®y, by simpa‚ü© ‚ü®x, by simp_all‚ü©‚ü©

lemma WellFoundedGT.exists_eq_sup {Œ±} [CompleteLattice Œ±] [WellFoundedGT Œ±]
    (f : ‚Ñï ‚Üío Œ±) : ‚àÉ i, f i = ‚®Ü i, f i := by
  obtain ‚ü®n, hn‚ü© := wellFoundedGT_iff_monotone_chain_condition.mp ‚ÄπWellFoundedGT Œ±‚Ä∫ f
  exact ‚ü®n, le_antisymm (le_iSup _ _) (iSup_le fun i ‚Ü¶
    (le_total i n).elim (f.2 ¬∑) (fun h ‚Ü¶ (hn _ h).ge))‚ü©

lemma WellFoundedLT.exists_eq_inf {Œ±} [CompleteLattice Œ±] [WellFoundedLT Œ±]
    (f : ‚Ñï ‚Üío Œ±·µí·µà) : ‚àÉ i, f i = (‚®Ö i, f i : Œ±) :=
  WellFoundedGT.exists_eq_sup (Œ± := Œ±·µí·µà) f

lemma IsLocalRing.maximalIdeal_pow_card_smul_top_le {R M}
    [CommRing R] [IsLocalRing R] [IsNoetherianRing R] [AddCommGroup M] [Module R M] (N : Submodule R M)
    [Finite (M ‚ß∏ N)] : maximalIdeal R ^ Nat.card (M ‚ß∏ N) ‚Ä¢ ‚ä§ ‚â§ N := by
  let f (n) : Submodule R (M ‚ß∏ N) := maximalIdeal R ^ n ‚Ä¢ ‚ä§
  have hf : ‚àÄ i j, i ‚â§ j ‚Üí f j ‚â§ f i :=
    fun i j h ‚Ü¶ Submodule.smul_mono (Ideal.pow_le_pow_right h) le_rfl
  have H : ‚àÉ i, f i = ‚ä• := by
    obtain ‚ü®i, hi‚ü© := WellFoundedLT.exists_eq_inf ‚ü®f, hf‚ü©
    have := Ideal.iInf_pow_smul_eq_bot_of_isLocalRing (R := R) (M := M ‚ß∏ N) _
      (maximalIdeal.isMaximal R).ne_top
    exact ‚ü®i, by simpa [f, this] using hi‚ü©
  have (i) : Set.ncard (Œ± := M ‚ß∏ N) (f i) ‚â§ Nat.card (M ‚ß∏ N) - i + 1 := by
    induction i with
    | zero =>
      refine (Set.ncard_mono (Set.subset_univ _)).trans ?_
      simp [Set.ncard_univ]
    | succ n IH =>
      cases (hf _ _ n.le_succ).lt_or_eq with
      | inl h =>
        rw [‚Üê tsub_tsub]
        refine (Nat.le_sub_one_of_lt <| (Set.ncard_strictMono h).trans_le IH).trans ?_
        omega
      | inr h =>
        have (i) : f (i + n) = f n := by
          induction i with
          | zero => simp
          | succ m IH =>
            unfold f at *
            simp only [add_assoc, pow_add _ m, mul_smul, ‚Üê Nat.succ_eq_one_add, h]
            simp only [‚Üê mul_smul, ‚Üê pow_add, IH]
        obtain ‚ü®i, hi‚ü© := H
        replace hf := hf _ _ (i.le_add_right n)
        rw [this, hi, ‚Üê h, le_bot_iff] at hf
        simp [hf]
  have : f (Nat.card (M ‚ß∏ N)) = ‚ä• := by
    rw [‚Üê le_bot_iff]
    show (f (Nat.card (M ‚ß∏ N)) : Set (M ‚ß∏ N)) ‚äÜ {0}
    exact (Set.eq_of_subset_of_ncard_le (by simp) ((this _).trans (by simp))).ge
  simpa only [f, ‚Üê LinearMap.range_eq_top.mpr N.mkQ_surjective, ‚Üê Submodule.map_top,
    ‚Üê Submodule.map_smul'', ‚Üê le_bot_iff, Submodule.map_le_iff_le_comap, Submodule.comap_bot,
    Submodule.ker_mkQ] using this

theorem Submodule.comap_smul_of_le_range {R M M'} [CommRing R] [AddCommGroup M]
    [AddCommGroup M'] [Module R M] [Module R M']
    (f : M ‚Üí‚Çó[R] M') (S : Submodule R M') (hS : S ‚â§ LinearMap.range f) (I : Ideal R) :
    (I ‚Ä¢ S).comap f = (I ‚Ä¢ S.comap f) ‚äî LinearMap.ker f := by
  rw [‚Üê comap_map_eq, map_smul'', Submodule.map_comap_eq, inf_eq_right.mpr hS]

theorem Submodule.comap_smul_of_surjective {R M M'} [CommRing R] [AddCommGroup M]
    [AddCommGroup M'] [Module R M] [Module R M']
    (f : M ‚Üí‚Çó[R] M') (S : Submodule R M') (hS : Function.Surjective f) (I : Ideal R) :
    (I ‚Ä¢ S).comap f = (I ‚Ä¢ S.comap f) ‚äî LinearMap.ker f :=
  comap_smul_of_le_range f S (le_top.trans_eq (LinearMap.range_eq_top_of_surjective f hS).symm) I

noncomputable
def Pi.liftQuotient‚Çó {Œπ R M : Type*} [CommRing R] [AddCommGroup M] [Module R M] [Finite Œπ]
    (f : (Œπ ‚Üí R) ‚Üí‚Çó[R] M) (I : Ideal R) : (Œπ ‚Üí R ‚ß∏ I) ‚Üí‚Çó[R] M ‚ß∏ (I ‚Ä¢ ‚ä§ : Submodule R M) := by
  refine Submodule.liftQ _ (Submodule.mkQ _ ‚àò‚Çó f) ?_ ‚àò‚Çó
    (((Algebra.linearMap R (R ‚ß∏ I)).compLeft Œπ).quotKerEquivOfSurjective ?_).symm.toLinearMap
  ¬∑ intro x hx
    replace hx : ‚àÄ i, x i ‚àà I := by
      simpa [funext_iff, Ideal.Quotient.eq_zero_iff_mem] using hx
    cases nonempty_fintype Œπ
    classical
    have : x = ‚àë i : Œπ, x i ‚Ä¢ (Pi.single i 1 : Œπ ‚Üí R) := by
      simp [‚Üê Pi.single_smul, Finset.univ_sum_single]
    rw [this]
    simp only [LinearMap.mem_ker, LinearMap.coe_comp, Function.comp_apply, Submodule.mkQ_apply,
      Submodule.Quotient.mk_eq_zero]
    simp only [map_sum, map_smul]
    exact sum_mem fun i hi ‚Ü¶ Submodule.smul_mem_smul (hx i) Submodule.mem_top
  ¬∑ exact Function.Surjective.comp_left Ideal.Quotient.mk_surjective

lemma Pi.liftQuotient‚Çó_surjective {Œπ R M : Type*} [CommRing R] [AddCommGroup M] [Module R M] [Finite Œπ]
    (f : (Œπ ‚Üí R) ‚Üí‚Çó[R] M) (I : Ideal R) (hf : Function.Surjective f) :
    Function.Surjective (Pi.liftQuotient‚Çó f I) := by
  simp only [liftQuotient‚Çó, LinearMap.coe_comp, LinearEquiv.coe_coe, EquivLike.surjective_comp]
  rw [‚Üê LinearMap.range_eq_top, Submodule.range_liftQ, LinearMap.range_eq_top]
  exact (Submodule.mkQ_surjective _).comp hf

lemma Pi.liftQuotient‚Çó_bijective {Œπ R M : Type*} [CommRing R] [AddCommGroup M] [Module R M] [Finite Œπ]
    (f : (Œπ ‚Üí R) ‚Üí‚Çó[R] M) (I : Ideal R) (hf : Function.Surjective f)
    (hf' : LinearMap.ker f ‚â§ LinearMap.ker ((Algebra.linearMap R (R ‚ß∏ I)).compLeft Œπ)) :
    Function.Bijective (Pi.liftQuotient‚Çó f I) := by
  refine ‚ü®?_, liftQuotient‚Çó_surjective f I hf‚ü©
  simp only [liftQuotient‚Çó, LinearMap.coe_comp, LinearEquiv.coe_coe, EquivLike.injective_comp]
  rw [‚Üê LinearMap.ker_eq_bot, Submodule.ker_liftQ, ‚Üê le_bot_iff, Submodule.map_le_iff_le_comap,
      Submodule.comap_bot, Submodule.ker_mkQ, LinearMap.ker_comp, Submodule.ker_mkQ,
      Submodule.comap_smul_of_surjective _ _ hf, Submodule.comap_top]
  refine sup_le (Submodule.smul_le.mpr ?_) hf'
  rintro r hr m -
  simp only [LinearMap.mem_ker, funext_iff, LinearMap.compLeft_apply, Function.comp_apply,
    smul_apply, Algebra.linearMap_apply, Ideal.Quotient.algebraMap_eq, zero_apply,
    Ideal.Quotient.eq_zero_iff_mem, smul_eq_mul, I.mul_mem_right _ hr, implies_true]

lemma Finsupp.comapDomain_surjective {Œ± Œ≤ M} [Zero M] [Finite Œ≤]
    (f : Œ± ‚Üí Œ≤) (hf : Function.Injective f) :
    Function.Surjective fun l : Œ≤ ‚Üí‚ÇÄ M ‚Ü¶ Finsupp.comapDomain f l hf.injOn := by
  classical
  intro x
  cases isEmpty_or_nonempty Œ±
  ¬∑ refine ‚ü®0, Finsupp.ext <| fun a ‚Ü¶ IsEmpty.elim ‚Äπ_‚Ä∫ a‚ü©
  obtain ‚ü®g, hg‚ü© := hf.hasLeftInverse
  refine ‚ü®Finsupp.equivFunOnFinite.symm (x ‚àò g), Finsupp.ext <| fun a ‚Ü¶ by simp [hg a]‚ü©

lemma IsModuleTopology.compactSpace
    (R M : Type*) [CommRing R] [TopologicalSpace R] [AddCommGroup M]
    [Module R M] [TopologicalSpace M] [IsModuleTopology R M]
    [CompactSpace R] [Module.Finite R M] : CompactSpace M :=
  letI : ContinuousAdd M := toContinuousAdd R M
  ‚ü®Submodule.isCompact_of_fg (Module.Finite.fg_top (R := R))‚ü©

theorem Module.support_quotient {R M} [CommRing R] [AddCommGroup M]
    [Module R M] [Module.Finite R M] (I : Ideal R) :
    Module.support R (M ‚ß∏ (I ‚Ä¢ ‚ä§ : Submodule R M)) =
      Module.support R M ‚à© PrimeSpectrum.zeroLocus I := by
  apply subset_antisymm
  ¬∑ refine Set.subset_inter ?_ ?_
    ¬∑ exact Module.support_subset_of_surjective _ (Submodule.mkQ_surjective _)
    ¬∑ rw [support_eq_zeroLocus]
      apply PrimeSpectrum.zeroLocus_anti_mono_ideal
      rw [Submodule.annihilator_quotient]
      exact fun x hx ‚Ü¶ Submodule.mem_colon.mpr fun p ‚Ü¶ Submodule.smul_mem_smul hx
  ¬∑ rintro p ‚ü®hp‚ÇÅ, hp‚ÇÇ‚ü©
    rw [Module.mem_support_iff] at hp‚ÇÅ ‚ä¢
    let R‚Çö := Localization.AtPrime p.asIdeal
    let M‚Çö := LocalizedModule p.asIdeal.primeCompl M
    let M‚Çö' := LocalizedModule p.asIdeal.primeCompl (M ‚ß∏ (I ‚Ä¢ ‚ä§ : Submodule R M))
    let f : M‚Çö ‚Üí‚Çó[R] M‚Çö' := (LocalizedModule.map _ (Submodule.mkQ _)).restrictScalars R
    have hf : LinearMap.ker f = I ‚Ä¢ ‚ä§ := by
      refine (LinearMap.ker_localizedMap_eq_localized'_ker R‚Çö ..).trans ?_
      show Submodule.localized‚ÇÄ _ _ _ = _
      simp only [Submodule.ker_mkQ, Submodule.localized‚ÇÄ_smul, Submodule.localized‚ÇÄ_top]
    let f' : (M‚Çö ‚ß∏ (I ‚Ä¢ ‚ä§ : Submodule R M‚Çö)) ‚âÉ‚Çó[R] M‚Çö' :=
      LinearEquiv.ofBijective (Submodule.liftQ _ f hf.ge) <| by
        constructor
        ¬∑ rw [‚Üê LinearMap.ker_eq_bot, Submodule.ker_liftQ, hf,
            ‚Üê le_bot_iff, Submodule.map_le_iff_le_comap, Submodule.comap_bot, Submodule.ker_mkQ]
        ¬∑ rw [‚Üê LinearMap.range_eq_top, Submodule.range_liftQ, LinearMap.range_eq_top]
          exact (LocalizedModule.map_surjective _ _ (Submodule.mkQ_surjective _))
    have : Module.Finite R‚Çö M‚Çö :=
      Module.Finite.of_isLocalizedModule p.asIdeal.primeCompl
        (LocalizedModule.mkLinearMap _ _)
    have : Nontrivial (M‚Çö ‚ß∏ (I ‚Ä¢ ‚ä§ : Submodule R M‚Çö)) := by
      apply Submodule.Quotient.nontrivial_of_lt_top
      rw [lt_top_iff_ne_top]
      intro H
      have : I.map (algebraMap R R‚Çö) ‚Ä¢ (‚ä§ : Submodule R‚Çö M‚Çö) = ‚ä§ := by
        rw [‚Üê top_le_iff]
        show ‚ä§ ‚â§ (I.map (algebraMap R R‚Çö) ‚Ä¢ (‚ä§ : Submodule R‚Çö M‚Çö)).restrictScalars R
        rw [‚Üê H, Submodule.smul_le]
        intro r hr n hn
        rw [‚Üê algebraMap_smul R‚Çö, Submodule.restrictScalars_mem]
        exact Submodule.smul_mem_smul (Ideal.mem_map_of_mem _ hr) hn
      have := Submodule.eq_bot_of_le_smul_of_le_jacobson_bot _ ‚ä§ Module.Finite.fg_top this.ge
        ((Ideal.map_mono hp‚ÇÇ).trans (by
          rw [Localization.AtPrime.map_eq_maximalIdeal]
          exact IsLocalRing.maximalIdeal_le_jacobson _))
      exact top_ne_bot this
    exact f'.symm.nontrivial

lemma ringKrullDim_quotient {R : Type*} [CommRing R] (I : Ideal R) :
    ringKrullDim (R ‚ß∏ I) = Order.krullDim (PrimeSpectrum.zeroLocus (R := R) I) := by
  let e : PrimeSpectrum (R ‚ß∏ I) ‚âÉ (PrimeSpectrum.zeroLocus (R := R) I) :=
    (Equiv.ofInjective _ (PrimeSpectrum.comap_injective_of_surjective _
      Ideal.Quotient.mk_surjective)).trans (Equiv.setCongr
      (by rw [PrimeSpectrum.range_comap_of_surjective _ _ Ideal.Quotient.mk_surjective,
        Ideal.mk_ker]))
  let e' : PrimeSpectrum (R ‚ß∏ I) ‚âÉo (PrimeSpectrum.zeroLocus (R := R) I) :=
    { __ := e, map_rel_iff' := fun {a b} ‚Ü¶ by
        show a.asIdeal.comap _ ‚â§ b.asIdeal.comap _ ‚Üî a ‚â§ b
        rw [‚Üê Ideal.map_le_iff_le_comap,
          Ideal.map_comap_of_surjective _ Ideal.Quotient.mk_surjective]
        rfl }
  rw [ringKrullDim, Order.krullDim_eq_of_orderIso e']

lemma disjoint_nonZeroDivisors_of_mem_minimalPrimes
    {R : Type*} [CommRing R] (p : Ideal R) (hp : p ‚àà minimalPrimes R) :
    Disjoint (p : Set R) (nonZeroDivisors R) := by
  classical
  rw [‚Üê Set.subset_compl_iff_disjoint_right, Set.subset_def]
  simp only [SetLike.mem_coe, Set.mem_compl_iff, mem_nonZeroDivisors_iff, not_forall,
    Classical.not_imp]
  intro x hxp
  have := hp.1.1
  have : p.map (algebraMap R (Localization.AtPrime p)) ‚â§ nilradical _ := by
    rw [nilradical, Ideal.radical_eq_sInf, le_sInf_iff]
    rintro q ‚ü®-, hq‚ü©
    obtain ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := ((IsLocalization.AtPrime.orderIsoOfPrime _ p) ‚ü®q, hq‚ü©).2
    rw [Ideal.map_le_iff_le_comap]
    exact hp.2 ‚ü®h‚ÇÅ, bot_le‚ü© h‚ÇÇ
  obtain ‚ü®n, hn : _ = 0‚ü© := this (Ideal.mem_map_of_mem _ hxp)
  rw [‚Üê map_pow, ‚Üê map_zero (algebraMap R _), IsLocalization.eq_iff_exists p.primeCompl] at hn
  obtain ‚ü®t, ht‚ü© := hn
  simp only [mul_zero] at ht
  have H : ‚àÉ n, t.1 * x ^ n = 0 := ‚ü®n, ht‚ü©
  have : Nat.find H ‚â† 0 := by
    intro h
    have := Nat.find_spec H
    simp only [h, pow_zero, mul_one] at this
    exact t.2 (this ‚ñ∏ zero_mem p)
  refine ‚ü®t.1 * x ^ (Nat.find H - 1), ?_, ?_‚ü©
  ¬∑ rw [mul_assoc, ‚Üê pow_succ, tsub_add_cancel_of_le, Nat.find_spec H]
    rwa [Nat.one_le_iff_ne_zero]
  ¬∑ exact Nat.find_min H (Nat.sub_one_lt this)

lemma ringKrullDim_quotient_succ_le_of_nonZeroDivisor
    {R : Type*} [CommRing R] (r : R) (hr : r ‚àà nonZeroDivisors R) :
    ringKrullDim (R ‚ß∏ Ideal.span {r}) + 1 ‚â§ ringKrullDim R := by
  by_cases hr' : Ideal.span {r} = ‚ä§
  ¬∑ rw [hr', ringKrullDim_eq_bot_of_subsingleton]
    simp
  have : Nonempty (PrimeSpectrum.zeroLocus (R := R) (Ideal.span {r})) := by
    rwa [Set.nonempty_coe_sort, Set.nonempty_iff_ne_empty, ne_eq,
      PrimeSpectrum.zeroLocus_empty_iff_eq_top]
  have := Ideal.Quotient.nontrivial hr'
  have := (Ideal.Quotient.mk (Ideal.span {r})).domain_nontrivial
  rw [ringKrullDim_quotient, Order.krullDim_eq_iSup_length, ringKrullDim,
    Order.krullDim_eq_iSup_length, ‚Üê WithBot.coe_one, ‚Üê WithBot.coe_add,
    ENat.iSup_add, WithBot.coe_le_coe, iSup_le_iff]
  intros l
  obtain ‚ü®p, hp, hp'‚ü© := Ideal.exists_minimalPrimes_le (J := l.head.1.asIdeal) bot_le
  let p' : PrimeSpectrum R := ‚ü®p, hp.1.1‚ü©
  have hp' : p' < l.head := lt_of_le_of_ne hp' (by
    intro h
    have := disjoint_nonZeroDivisors_of_mem_minimalPrimes p hp
    exact Set.disjoint_iff.mp this ‚ü®show r ‚àà p by simpa [‚Üê h] using l.head.2, hr‚ü©)
  refine le_trans ?_ (le_iSup _ ((l.map Subtype.val (fun _ _ ‚Ü¶ id)).cons p' hp'))
  show (l.length + 1 : ‚Ñï‚àû) ‚â§ ‚Üë(0 + l.length + 1)
  simp
