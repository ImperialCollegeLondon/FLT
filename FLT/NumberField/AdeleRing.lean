import FLT.NumberField.InfiniteAdeleRing

universe u

section LocallyCompact

-- see https://github.com/smmercuri/adele-ring_locally-compact
-- for a proof of this

variable (K : Type*) [Field K] [NumberField K]

instance NumberField.AdeleRing.locallyCompactSpace : LocallyCompactSpace (AdeleRing K) :=
  sorry

end LocallyCompact

section BaseChange

end BaseChange

-- Maybe this discreteness isn't even stated in the best way?
-- I'm ambivalent about how it's stated

section Discrete

open NumberField DedekindDomain

-- Should surely be in mathlib
abbrev Rat.infinitePlace : InfinitePlace ‚Ñö where
  val := {
    toFun := fun q ‚Ü¶ |(q : ‚Ñù)|
    map_mul' := fun x y ‚Ü¶ by
      simp only [cast_mul]
      exact abs_mul (x : ‚Ñù) y
    nonneg' := by
      intro x
      simp only [abs_nonneg]
    eq_zero' := by
      intro x
      simp
    add_le' := by
      intro x y
      simp only [cast_add]
      exact abs_add_le (x : ‚Ñù) y
  }
  property := ‚ü®Rat.castHom ‚ÑÇ, by
    ext x
    simp
    ‚ü©

theorem Rat.AdeleRing.zero_discrete : ‚àÉ U : Set (AdeleRing ‚Ñö),
    IsOpen U ‚àß (algebraMap ‚Ñö (AdeleRing ‚Ñö)) ‚Åª¬π' U = {0} := by
  use {f | ‚àÄ v, f v ‚àà (Metric.ball 0 1)} √óÀ¢
    {f | ‚àÄ v , f v ‚àà IsDedekindDomain.HeightOneSpectrum.adicCompletionIntegers ‚Ñö v}
  refine ‚ü®sorry, ?_‚ü©
  apply subset_antisymm
  ¬∑ intro x hx
    rw [Set.mem_preimage] at hx
    simp only [Set.mem_singleton_iff]
    have : (algebraMap ‚Ñö (AdeleRing ‚Ñö)) x = (algebraMap ‚Ñö (InfiniteAdeleRing ‚Ñö) x, algebraMap ‚Ñö (FiniteAdeleRing (ùìû ‚Ñö) ‚Ñö) x)
    ¬∑ rfl
    rw [this] at hx
    clear this
    rw [Set.mem_prod] at hx
    obtain ‚ü®h1, h2‚ü© := hx
    dsimp only at h1 h2
    simp only [Metric.mem_ball, dist_zero_right, Set.mem_setOf_eq, InfiniteAdeleRing.algebraMap_apply, UniformSpace.Completion.norm_coe] at h1
    simp only [Set.mem_setOf_eq] at h2
    specialize h1 Rat.infinitePlace
    simp at h1
    change (|(x:‚Ñù)|) < 1 at h1
    norm_cast at h1
    have := padicNorm.not_int_of_not_padic_int
    have intx: ‚àÉ (y:‚Ñ§), y = x
    ¬∑ by_contra h
      push_neg at h
      sorry
    sorry
  ¬∑ intro x
    simp only [Set.mem_singleton_iff, Set.mem_preimage]
    rintro rfl
    simp only [map_zero]
    change (0, 0) ‚àà _
    simp only [Prod.mk_zero_zero, Set.mem_prod, Prod.fst_zero, Prod.snd_zero]
    constructor
    ¬∑ simp only [Metric.mem_ball, dist_zero_right, Set.mem_setOf_eq]
      intro v
      have : ‚Äñ(0:InfiniteAdeleRing ‚Ñö) v‚Äñ = 0
      ¬∑ simp only [norm_eq_zero]
        rfl
      simp [this, zero_lt_one]
    ¬∑ simp only [Set.mem_setOf_eq]
      intro v
      apply zero_mem

theorem Rat.AdeleRing.discrete : ‚àÄ q : ‚Ñö, ‚àÉ U : Set (AdeleRing ‚Ñö),
    IsOpen U ‚àß (algebraMap ‚Ñö (AdeleRing ‚Ñö)) ‚Åª¬π' U = {q} := sorry

variable (K : Type*) [Field K] [NumberField K]

theorem NumberField.AdeleRing.discrete : ‚àÄ k : K, ‚àÉ U : Set (AdeleRing K),
    IsOpen U ‚àß (algebraMap K (AdeleRing K)) ‚Åª¬π' U = {k} := sorry

end Discrete

section Compact

open NumberField

theorem Rat.AdeleRing.cocompact :
    CompactSpace (AdeleRing ‚Ñö ‚ß∏ AddMonoidHom.range (algebraMap ‚Ñö (AdeleRing ‚Ñö)).toAddMonoidHom) :=
  sorry

variable (K : Type*) [Field K] [NumberField K]

theorem NumberField.AdeleRing.cocompact :
    CompactSpace (AdeleRing K ‚ß∏ AddMonoidHom.range (algebraMap K (AdeleRing K)).toAddMonoidHom) :=
  sorry

end Compact
