/-
Copyright (c) 2024 Salvatore Mercuri. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Salvatore Mercuri
-/
import Mathlib.NumberTheory.NumberField.Embeddings
import Mathlib.NumberTheory.NumberField.AdeleRing
import Mathlib.Tactic
import FLT.Mathlib.Analysis.Normed.Ring.WithAbs
import FLT.Mathlib.Analysis.SpecificLimits.Basic
import FLT.Mathlib.Data.Fin.Basic
import FLT.Mathlib.Data.Finset.Lattice.Fold
import FLT.Mathlib.Topology.Constructions

/-!
# Weak approximation

This file contains weak approximation theorems for number fields and their completions
at infinite places. The main weak approximation theorem here states that for `(x·µ•)·µ•` indexed by
finitely many infinite places, with each `x·µ• ‚àà K·µ•` there exists a global `y ‚àà K` such that
`y` is arbitrarily close to each `x·µ•` (with respect to the topology on `K·µ•` defined by `v`).
This can be equivalently stated by asserting that the appropriate `algebraMap` has dense range.

## Main results
- `NumberField.InfinitePlace.denseRange_algebraMap_pi` : weak approximation for `(x·µ•)·µ•` when
  `v` ranges over all infinite places and each `x·µ• ‚àà K` is rational.
- `NumberField.InfiniteAdeleRing.denseRange_algebraMap` : weak approximation for `(x·µ•)·µ•` when
  `v` ranges over all infinite places and each `x·µ• ‚àà K·µ•` (i.e., `(x·µ•)·µ•` is an infinite adele).
- `NumberField.InfinitePlace.Completion.denseRange_algebraMap_subtype_pi` : weak approximation
  for `(x·µ•)·µ•` when `v` ranges over a subcollection of all infinite places and each
  `x·µ• ‚àà K·µ•` (useful for example when thinking only about infinite places `w` of `L` that extend
  some infinite place `v` of `K`).
-/

open scoped Topology Classical

open NumberField

noncomputable section

namespace AbsoluteValue

variable {K : Type*} [Field K] {v : AbsoluteValue K ‚Ñù} {w : AbsoluteValue K ‚Ñù}

/-!
## Results about equivalent absolute values

Two non-trivial absolute values `v` and `w` on `K` to be "equivalent" if `v x < 1` if and only
if `w x < 1`. We show that this is the case if and only if there is some real `t > 0` such that
`v = w ^ t`.
-/

theorem inv_pos {x : K} (h : 0 < v x) : 0 < v x‚Åª¬π := by
  rwa [map_inv‚ÇÄ, _root_.inv_pos]

theorem exists_lt_one_of_exists_one_lt
    (h : ‚àÉ x, 1 < v x) :
    ‚àÉ x, 0 < v x ‚àß v x < 1 :=
  let ‚ü®x, hx‚ü© := h
  ‚ü®x‚Åª¬π, inv_pos (by linarith), map_inv‚ÇÄ v _ ‚ñ∏ inv_lt_one_iff‚ÇÄ.2 <| Or.inr hx‚ü©

theorem ne_zero_of_lt_one {x : K} (hv : 1 < v x) :
    x ‚â† 0 := by
  intro hx
  rw [hx, map_zero] at hv
  linarith

theorem nonpos_iff (x : K) : v x ‚â§ 0 ‚Üî v x = 0 := by
  simp only [le_antisymm_iff, v.nonneg _, and_true]

theorem inv_lt_one_iff {x : K} : v x‚Åª¬π < 1 ‚Üî x = 0 ‚à® 1 < v x := by
  simp only [map_inv‚ÇÄ, inv_lt_one_iff‚ÇÄ, nonpos_iff, map_eq_zero]

theorem mul_one_div_lt_iff {y : K} (x : K) (h : 0 < v y) : v (x * (1 / y)) < 1 ‚Üî v x < v y := by
  rw [map_mul, one_div, map_inv‚ÇÄ, mul_inv_lt_iff‚ÇÄ h, one_mul]

theorem mul_one_div_pow_lt_iff {n : ‚Ñï} {y : K} (x : K) (h : 0 < v y) :
    v (x * (1 / y ^ n)) < 1 ‚Üî v x < v y ^ n :=
  map_pow v _ _ ‚ñ∏ mul_one_div_lt_iff x (map_pow v _ _ ‚ñ∏ pow_pos h n)

theorem one_lt_of_lt_one {v w : AbsoluteValue K ‚Ñù}
    (h : ‚àÄ x, v x < 1 ‚Üí w x < 1) {x : K} (hv : 1 < v x) : 1 < w x :=
  (inv_lt_one_iff.1 <| h _ <| map_inv‚ÇÄ v _ ‚ñ∏ inv_lt_one_of_one_lt‚ÇÄ hv).resolve_left <|
    ne_zero_of_lt_one hv

/--
If the absolute values `v` and `w` are both less than 1 on the same points, then they
are both greater than one on the same points.
-/
theorem one_lt_iff_of_lt_one_iff {v w : AbsoluteValue K ‚Ñù}
    (h : ‚àÄ x, v x < 1 ‚Üî w x < 1) (x : K) : 1 < v x ‚Üî 1 < w x :=
  ‚ü®fun hv => one_lt_of_lt_one (fun _ => (h _).1) hv,
    fun hw => one_lt_of_lt_one (fun _ => (h _).2) hw‚ü©

theorem eq_one_of_lt_one_iff {v w : AbsoluteValue K ‚Ñù}
    (h : ‚àÄ x, v x < 1 ‚Üî w x < 1) {x : K} (hv : v x = 1) : w x = 1 := by
  cases eq_or_lt_of_le (not_lt.1 <| (h x).not.1 hv.not_lt) with
  | inl hl => rw [‚Üê hl]
  | inr hr => rw [‚Üê one_lt_iff_of_lt_one_iff h] at hr; linarith

/--
If the absolute values `v` and `w` are both less than 1 on the same points, then they
are both equal one on the same points.
-/
theorem eq_one_iff_of_lt_one_iff {v w : AbsoluteValue K ‚Ñù}
    (h : ‚àÄ x, v x < 1 ‚Üî w x < 1) (x : K) : v x = 1 ‚Üî w x = 1 :=
  ‚ü®fun hv => eq_one_of_lt_one_iff h hv, fun hw => eq_one_of_lt_one_iff (fun _ => (h _).symm) hw‚ü©

theorem pos_of_pos {v : AbsoluteValue K ‚Ñù} {a : K} (w : AbsoluteValue K ‚Ñù) (hv : 0 < v a) :
    0 < w a := by
  rwa [AbsoluteValue.pos_iff] at hv ‚ä¢

/--
If `v` is a nontrivial absolute value, and `w` is another absolute value such that `w x < 1`
if `v x < 1`, then we must also have `v x < 1` if `w x < 1`.
-/
theorem lt_one_iff_of_lt_one_imp (hv : ‚àÉ x, 1 < v x) (h : ‚àÄ x, v x < 1 ‚Üí w x < 1) {a : K} :
    v a < 1 ‚Üî w a < 1:= by
  let ‚ü®x‚ÇÄ, hx‚ÇÄ‚ü© := exists_lt_one_of_exists_one_lt hv
  refine ‚ü®h a, fun hw => ?_‚ü©
  by_contra! hv
  have (n : ‚Ñï) : w x‚ÇÄ < w a ^ n := by
    have : v (x‚ÇÄ * (1 / a ^ n)) < 1 := by
      rw [mul_one_div_pow_lt_iff _ (by linarith)]
      exact lt_of_lt_of_le hx‚ÇÄ.2 <| one_le_pow‚ÇÄ hv
    exact mul_one_div_pow_lt_iff _ (pos_of_pos w (by linarith)) |>.1 <| h _ this
  have hcontr : Filter.Tendsto (fun (_ : ‚Ñï) => w x‚ÇÄ) Filter.atTop (ùìù 0) := by
    have hwn : Filter.Tendsto (fun n => w a ^ n) Filter.atTop (ùìù 0) := by
      have := abs_eq_self.2 (w.nonneg _) ‚ñ∏ hw
      exact tendsto_pow_atTop_nhds_zero_iff.2 this
    have hwn' : ‚àÄ·∂† n in Filter.atTop, w x‚ÇÄ ‚â§ w a ^ n := by
      simp only [Filter.eventually_atTop, ge_iff_le]
      exact ‚ü®1, fun n _ => le_of_lt (this n)‚ü©
    exact tendsto_of_tendsto_of_tendsto_of_le_of_le' tendsto_const_nhds
      hwn (Filter.Eventually.of_forall fun (_ : ‚Ñï) => w.nonneg x‚ÇÄ) hwn'
  linarith [tendsto_nhds_unique hcontr tendsto_const_nhds, pos_of_pos w hx‚ÇÄ.1]

/--
If `v` and `w` be two absolute values on `K`, `v` is non-trivial, and `v x < 1` if and
only if `w x < 1`, then `log (v a) / log (w a)` is constant for all `a ‚àà K`.
-/
theorem log_div_image_eq_singleton_of_le_one_iff {v w : AbsoluteValue K ‚Ñù}
    (hv : ‚àÉ x, 1 < v x)
    (h : ‚àÄ x, v x < 1 ‚Üî w x < 1) :
    let f : K ‚Üí ‚Ñù := fun a => Real.log (v a) / Real.log (w a)
    ‚àÉ (a : K) (_ : 1 < v a), ‚àÄ (b : K) (_ : 1 < v b), f b = f a := by
  obtain ‚ü®a, ha‚ü© := hv
  refine ‚ü®a, ha, fun b hb‚ÇÅ => ?_‚ü©
  by_contra! hb‚ÇÇ
  wlog hwlog : Real.log (v b) / Real.log (w b) < Real.log (v a) / Real.log (w a) generalizing a b
  ¬∑ exact this b hb‚ÇÅ a ha hb‚ÇÇ.symm <| lt_of_le_of_ne (not_lt.1 hwlog) hb‚ÇÇ.symm
  have : Real.log (v b) / Real.log (v a) < Real.log (w b) / Real.log (w a) := by
    have hwa := (one_lt_iff_of_lt_one_iff h _).1 ha
    have hwb := (one_lt_iff_of_lt_one_iff h _).1 hb‚ÇÅ
    rw [div_lt_div_iff‚ÇÄ (Real.log_pos ha) (Real.log_pos hwa)]
    nth_rw 2 [mul_comm]
    rwa [‚Üê div_lt_div_iff‚ÇÄ (Real.log_pos hwb) (Real.log_pos hwa)]
  let ‚ü®q, hq‚ü© := exists_rat_btwn this
  rw [‚Üê Rat.num_div_den q, Rat.cast_div, Rat.cast_intCast, Rat.cast_natCast] at hq
  have h‚ÇÄ : v (b ^ q.den / a ^ q.num) < 1 := by
    have := hq.1
    rwa [div_lt_div_iff‚ÇÄ (Real.log_pos ha) (by simp only [Nat.cast_pos, q.den_pos]), mul_comm,
      ‚Üê Real.log_pow, ‚Üê Real.log_zpow, Real.log_lt_log_iff (pow_pos (by linarith) _)
      (zpow_pos (by linarith) _), ‚Üê div_lt_one (zpow_pos (by linarith) _),
      ‚Üê map_pow, ‚Üê map_zpow‚ÇÄ, ‚Üê map_div‚ÇÄ] at this
  have h‚ÇÅ : 1 < w (b ^ q.den / a ^ q.num) := by
    have hwa := (one_lt_iff_of_lt_one_iff h _).1 ha
    letI := (one_lt_iff_of_lt_one_iff h _).1 hb‚ÇÅ
    have := hq.2
    rw [div_lt_div_iff‚ÇÄ (by simp only [Nat.cast_pos, q.den_pos]) (Real.log_pos hwa)] at this
    nth_rw 2 [mul_comm] at this
    rwa [‚Üê Real.log_pow, ‚Üê Real.log_zpow,
      Real.log_lt_log_iff (zpow_pos (by linarith) _) (pow_pos (by linarith) _),
      ‚Üê one_lt_div (zpow_pos (by linarith) _), ‚Üê map_pow, ‚Üê map_zpow‚ÇÄ, ‚Üê map_div‚ÇÄ] at this
  exact not_lt_of_lt ((h _).1 h‚ÇÄ) h‚ÇÅ

theorem exists_rpow_of_one_lt {v w : AbsoluteValue K ‚Ñù} (hv : ‚àÉ x, 1 < v x)
    (h : ‚àÄ x, v x < 1 ‚Üî w x < 1) :
    ‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, 1 < v x ‚Üí v x = w x ^ t := by
  obtain ‚ü®a, ha, hlog‚ü© := log_div_image_eq_singleton_of_le_one_iff hv h
  refine ‚ü®Real.log (v a) / Real.log (w a),
    div_pos (Real.log_pos ha) (Real.log_pos ((one_lt_iff_of_lt_one_iff h a).1 ha)), fun b hb => ?_‚ü©
  simp_rw [‚Üê hlog b hb]
  letI := (one_lt_iff_of_lt_one_iff h b).1 hb
  rw [div_eq_inv_mul, Real.rpow_mul (w.nonneg _), Real.rpow_inv_log (by linarith) (by linarith),
    Real.exp_one_rpow, Real.exp_log (by linarith)]

open Real in
/--
Let `v` and `w` be two absolute values on `K`, where `v` is non-trivial. The condition that
`v x < 1` if and only if `w x < 1` is equivalent to the condition that `v = w ^ t` for some
real `t > 0`.
-/
theorem eq_rpow_iff_lt_one_iff (v w : AbsoluteValue K ‚Ñù) (hv : ‚àÉ x, 1 < v x) :
    (‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, v x = (w x) ^ t) ‚Üî (‚àÄ x, v x < 1 ‚Üî w x < 1) := by
  refine ‚ü®fun ‚ü®t, ht, h‚ü© x => h x ‚ñ∏ Real.rpow_lt_one_iff' (w.nonneg _) ht, fun h => ?_‚ü©
  suffices : ‚àÉ (t : ‚Ñù) (_ : t > 0), ‚àÄ x, 1 < v x ‚Üí v x = w x ^ t
  ¬∑ obtain ‚ü®t, ht, hsuff‚ü© := this
    refine ‚ü®t, ht, fun x => ?_‚ü©
    by_cases h‚ÇÄ : v x = 0
    ¬∑ rw [(map_eq_zero v).1 h‚ÇÄ, map_zero, map_zero, zero_rpow (by linarith)]
    ¬∑ by_cases h‚ÇÅ : v x = 1
      ¬∑ rw [h‚ÇÅ, (eq_one_iff_of_lt_one_iff h x).1 h‚ÇÅ, one_rpow]
      ¬∑ by_cases h‚ÇÇ : 0 < v x ‚àß v x < 1
        ¬∑ rw [‚Üê inv_inj, ‚Üê map_inv‚ÇÄ v, hsuff _ (map_inv‚ÇÄ v _ ‚ñ∏ one_lt_inv_iff‚ÇÄ.2 h‚ÇÇ), map_inv‚ÇÄ,
            Real.inv_rpow (w.nonneg _)]
        ¬∑ rw [‚Üê one_lt_inv_iff‚ÇÄ, ‚Üê map_inv‚ÇÄ, not_lt] at h‚ÇÇ
          rw [‚Üê ne_eq, ‚Üê inv_ne_one, ‚Üê map_inv‚ÇÄ] at h‚ÇÅ
          exact hsuff _ <| (inv_lt_one_iff.1 <| lt_of_le_of_ne h‚ÇÇ h‚ÇÅ).resolve_left
            ((map_ne_zero v).1 h‚ÇÄ)
  exact exists_rpow_of_one_lt hv h

/--
If `v` is non-trivial and `v = w ^ t` for some `t > 0`, then we can find an `a ‚àà K` such that
`v a < 1` while `1 ‚â§ w a`.
-/
theorem exists_lt_one_one_le_of_ne_rpow (hv : ‚àÉ x, 1 < v x)
    (h : ¬¨‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, v x = (w x) ^ t) :
    ‚àÉ a : K, v a < 1 ‚àß 1 ‚â§ w a := by
  contrapose! h
  exact eq_rpow_iff_lt_one_iff _ _ hv |>.2 <| fun  _ => lt_one_iff_of_lt_one_imp hv h

theorem ne_pow_symm (h : ¬¨‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, v x = (w x) ^ t) :
    ¬¨‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, w x = (v x) ^ t := by
  simp only [exists_prop, not_exists, not_and, not_forall] at h ‚ä¢
  refine fun t ht => let ‚ü®x, hx‚ü© := h t‚Åª¬π (_root_.inv_pos.2 ht); ‚ü®x, ?_‚ü©
  contrapose! hx
  exact Real.eq_rpow_inv (v.nonneg _) (w.nonneg _) (by linarith) |>.2 hx.symm

/--
If `v` and `w` are two non-trivial absolute values such that `v = w ^ t` for some `t > 0`, then
we can find an `a ‚àà K` such that `1 < v a` while `w a  < 1`.
-/
theorem exists_one_lt_lt_one_of_ne_rpow
    (hv : ‚àÉ x, 1 < v x)
    (hw : ‚àÉ x, 1 < w x)
    (h : ¬¨‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, v x = (w x) ^ t) :
    ‚àÉ a : K, 1 < v a ‚àß w a < 1 := by
  let ‚ü®a, ha‚ü© := exists_lt_one_one_le_of_ne_rpow hv h
  let ‚ü®b, hb‚ü© := exists_lt_one_one_le_of_ne_rpow hw (ne_pow_symm h)
  refine ‚ü®b / a, ?_‚ü©
  simp only [map_div‚ÇÄ]
  exact ‚ü®one_lt_div (pos_of_pos v (by linarith)) |>.2 (by linarith),
    div_lt_one (by linarith) |>.2 (by linarith)‚ü©

/-!
## Results about limits and collections of absolute values

The main result of this section is that for any collection of non-trivial absolute values of
size at least two, we can find an element of `K` such that one absolute value is `> 1` while
all others are `< 1`.
-/

theorem apply_one_add_pow_le (a : K) (n : ‚Ñï) : v (1 + a ^ n) ‚â§ 1 + v a ^ n :=
  le_trans (v.add_le _ _) (by rw [map_one, map_pow])

theorem one_sub_pow_le (a : K) (n : ‚Ñï) : 1 - v a ^ n ‚â§ v (1 + a ^ n) :=
  le_trans (by rw [map_one, map_pow]) (v.le_add _ _)

/--
`v (1 / (1 + a ^ n)) ‚Üí 1` if `v a < 1`.
-/
theorem tendsto_div_one_add_pow_nhds_one {a : K} (ha : v a < 1) :
    Filter.Tendsto (fun (n : ‚Ñï) => v (1 / (1 + a ^ n))) Filter.atTop (ùìù 1) := by
  simp_rw [v.isAbsoluteValue.abv_div, v.map_one]
  nth_rw 2 [show (1 : ‚Ñù) = 1 / 1 by norm_num]
  apply Filter.Tendsto.div tendsto_const_nhds _ one_ne_zero
  exact tendsto_of_tendsto_of_tendsto_of_le_of_le (tendsto_one_sub_pow (v.nonneg _) ha)
    (tendsto_one_add_pow (v.nonneg _) ha) (one_sub_pow_le _) (apply_one_add_pow_le _)

/--
`v (1 / (1 + a ^ n)) ‚Üí 0` if `1 < v a`.
-/
theorem tendsto_pow_div_one_add_pow_zero {a : K} (ha : 1 < v a) :
    Filter.Tendsto (fun (n : ‚Ñï) => v (1 / (1 + a ^ n))) Filter.atTop (ùìù 0) := by
  simp_rw [div_eq_mul_inv, one_mul, map_inv‚ÇÄ, fun n => add_comm 1 (a ^ n)]
  apply Filter.Tendsto.inv_tendsto_atTop
  apply Filter.tendsto_atTop_mono (fun n => v.le_add _ _)
  simp_rw [map_one, map_pow v]
  apply Filter.tendsto_atTop_add_right_of_le _ _ _ (fun _ => le_rfl)
  refine tendsto_atTop_of_geom_le (by simp only [pow_zero, inv_one, zero_lt_one]) ha fun n => ?_
  rw [‚Üê map_pow, ‚Üê map_pow, ‚Üê map_mul, pow_succ']

open Filter in
/--
Let `a, b ‚àà K`, and let `v‚ÇÅ, ..., v‚Çñ` be absolute values with some `1 < v·µ¢ a` while all other
`v‚±º a < 1`. Suppose `1 < v·µ¢ b`. Let `w` be another absolute value on `K` such that `w a = 1`,
while `w b < 1`. Then we can find a sequence of values in `K` that tends to `‚àû` under `v·µ¢`,
tends to `0` under `v‚±º`, and is always `< 1` under `w`.

Such a sequence is given by `a ^ n * b`.
-/
theorem exists_tendsto_zero_tendsto_atTop_tendsto_const
    {Œπ : Type*} {v : Œπ ‚Üí AbsoluteValue K ‚Ñù} {w : AbsoluteValue K ‚Ñù} {a b : K} {i : Œπ}
    (ha : 1 < v i a) (haj : ‚àÄ j ‚â† i, v j a < 1) (haw : w a = 1) (hb : 1 < v i b) (hbw : w b < 1) :
    ‚àÉ c : ‚Ñï ‚Üí K,
      Tendsto (fun n => (v i) (c n)) atTop atTop ‚àß
        (‚àÄ j ‚â† i, Tendsto (fun n => (v j) (c n)) atTop (ùìù 0)) ‚àß
          (‚àÄ n, w (c n) < 1) := by
  refine ‚ü®fun n => a ^ n * b, ?_‚ü©; simp_rw [map_mul, map_pow, haw, one_pow, one_mul]
  refine ‚ü®Tendsto.atTop_mul_const (by linarith) (tendsto_pow_atTop_atTop_of_one_lt ha),
    fun j hj => ?_, fun _ => hbw‚ü©
  rw [‚Üê zero_mul <| v j b]
  exact Tendsto.mul_const _ <| tendsto_pow_atTop_nhds_zero_of_lt_one ((v j).nonneg _) (haj j hj)

/--
Let `a, b ‚àà K`, and let `v‚ÇÅ, ..., v‚Çñ` be absolute values with some `1 < v·µ¢ a` while all other
`v‚±º a < 1`. Suppose `1 < v·µ¢ b`. Let `w` be another absolute value on `K` such that `w a = 1`,
while `w b < 1`. Then there is an element `k ‚àà K` such that `1 < v·µ¢ k` while `v‚±º k < 1` for all
`j ‚â† i` and `w k < 1`.

This is given by taking large enough values of a witness sequence to
`exists_tendsto_zero_tendsto_atTop_tendsto_const` (for example `a ^ n * b` works).
-/
theorem exists_one_lt_lt_one_lt_one_of_eq_one
    {Œπ : Type*} [Fintype Œπ] {v : Œπ ‚Üí AbsoluteValue K ‚Ñù} {w : AbsoluteValue K ‚Ñù} {a b : K} {i : Œπ}
    (ha : 1 < v i a) (haj : ‚àÄ j ‚â† i, v j a < 1) (haw : w a = 1) (hb : 1 < v i b) (hbw : w b < 1) :
    ‚àÉ k : K, 1 < v i k ‚àß (‚àÄ j ‚â† i, v j k < 1) ‚àß w k < 1 := by
  let ‚ü®c, hc‚ü© := exists_tendsto_zero_tendsto_atTop_tendsto_const ha haj haw hb hbw
  simp_rw [Metric.tendsto_nhds, Filter.tendsto_atTop_atTop, Filter.eventually_atTop,
    dist_zero_right, ‚Üê WithAbs.norm_eq_abs, norm_norm] at hc
  choose r‚ÇÅ hr‚ÇÅ using hc.1 2
  choose r‚Çô hr‚Çô using fun j hj => hc.2.1 j hj 1 (by linarith)
  let r := Finset.univ.sup fun j => if h : j = i then r‚ÇÅ else r‚Çô j h
  refine ‚ü®c r, lt_of_lt_of_le (by linarith) (hr‚ÇÅ r ?_), fun j hj => ?_, hc.2.2 r‚ü©
  ¬∑ exact Finset.le_sup_dite_pos (p := fun j => j = i) (f := fun _ _ => r‚ÇÅ) (Finset.mem_univ _) rfl
  ¬∑ convert hr‚Çô j hj _ <| Finset.le_sup_dite_neg (fun j => j = i) (Finset.mem_univ j) _

open Filter in
/--
Let `a, b ‚àà K`, and let `v‚ÇÅ, ..., v‚Çñ` be absolute values with some `1 < v·µ¢ a` while all other
`v‚±º a < 1`. Let `w` be another absolute value on `K` such that `1 < w a`. Then there is a
sequence of elements in `K` that tendsto `v·µ¢ b` under `v·µ¢`, tends to `0` under `v‚±º` for `j ‚â† i`,
and tends to `w b` under `w`.

Such a sequence is given by `1 / (1 + a ^ (- n))`.
-/
theorem exists_tendsto_const_tendsto_zero_tendsto_const
    {Œπ : Type*} {v : Œπ ‚Üí AbsoluteValue K ‚Ñù} {w : AbsoluteValue K ‚Ñù} {a : K} {i : Œπ}
    (b : K) (ha : 1 < v i a) (haj : ‚àÄ j ‚â† i, v j a < 1) (haw : 1 < w a) :
    ‚àÉ c : ‚Ñï ‚Üí K,
      Tendsto (fun n => (v i) (c n)) atTop (ùìù ((v i) b)) ‚àß
        (‚àÄ j ‚â† i, Tendsto (fun n => v j (c n)) atTop (ùìù 0)) ‚àß
          Tendsto (fun n => w (c n)) atTop (ùìù (w b)) := by
  refine ‚ü®fun n => (1 / (1 + a‚Åª¬π ^ n) * b), ?_‚ü©; simp_rw [map_mul]
  nth_rw 2 [‚Üê one_mul (v i b), ‚Üê one_mul (w b)]
  let hai := map_inv‚ÇÄ (v i) _ ‚ñ∏ inv_lt_one_of_one_lt‚ÇÄ ha
  replace haw := (map_inv‚ÇÄ w _ ‚ñ∏ inv_lt_one_of_one_lt‚ÇÄ haw)
  refine ‚ü®Tendsto.mul_const _ (tendsto_div_one_add_pow_nhds_one hai), fun j hj => ?_,
      Tendsto.mul_const _ (tendsto_div_one_add_pow_nhds_one haw)‚ü©
  replace haj := map_inv‚ÇÄ (v j) _ ‚ñ∏ (one_lt_inv‚ÇÄ (pos_of_pos (v j) (by linarith))).2 (haj j hj)
  exact zero_mul (v j b) ‚ñ∏ Tendsto.mul_const _ (tendsto_pow_div_one_add_pow_zero haj)

/--
Let `a, b ‚àà K`, and let `v‚ÇÅ, ..., v‚Çñ` be absolute values with some `1 < v·µ¢ a` while all other
`v‚±º a < 1`. Suppose `1 < v·µ¢ b`. Let `w` be another absolute value on `K` such that `1 < w a`,
while `w b < 1`. Then there is an element `k ‚àà K` such that `1 < v·µ¢ k` while `v‚±º k < 1` for all
`j ‚â† i` and `w k < 1`.

This is given by taking large enough values of a witness sequence to
`exists_tendsto_const_tendsto_zero_tendsto_const` (for example `1 / (1 + a ^ (-n))` works).

Note that this is the result `exists_one_lt_lt_one_lt_one_of_eq_one` replacing the condition
that `w a = 1` with `1 < w a`.
-/
theorem exists_one_lt_lt_one_lt_one_of_one_lt
    {Œπ : Type*} [Fintype Œπ] {v : Œπ ‚Üí AbsoluteValue K ‚Ñù} {w : AbsoluteValue K ‚Ñù} {a b : K} {i : Œπ}
    (ha : 1 < v i a) (haj : ‚àÄ j ‚â† i, v j a < 1) (haw : 1 < w a) (hb : 1 < v i b) (hbw : w b < 1) :
    ‚àÉ k : K, 1 < v i k ‚àß (‚àÄ j ‚â† i, v j k < 1) ‚àß w k < 1 := by
  let ‚ü®c, hc‚ü© := exists_tendsto_const_tendsto_zero_tendsto_const b ha haj haw
  have h‚Çô := fun j hj => Metric.tendsto_nhds.1 <| hc.2.1 j hj
  simp_rw [Filter.eventually_atTop, dist_zero_right] at h‚Çô
  choose r‚ÇÅ hr‚ÇÅ using Filter.eventually_atTop.1 <| Filter.Tendsto.eventually_const_lt hb hc.1
  choose r‚Çô hr‚Çô using fun j hj => h‚Çô j hj 1 (by linarith)
  choose rN hrN using Filter.eventually_atTop.1 <| Filter.Tendsto.eventually_lt_const hbw hc.2.2
  let r := max (Finset.univ.sup fun j => if h : j = i then r‚ÇÅ else r‚Çô j h) rN
  refine ‚ü®c r, hr‚ÇÅ r ?_, fun j hj => ?_, ?_‚ü©
  ¬∑ exact le_max_iff.2 <| Or.inl <|
      Finset.le_sup_dite_pos (p := fun j => j = i) (f := fun _ _ => r‚ÇÅ) (Finset.mem_univ _) rfl
  ¬∑ simp only [‚Üê WithAbs.norm_eq_abs, norm_norm] at hr‚Çô
    exact hr‚Çô j hj _ <| le_max_iff.2 <| Or.inl <|
      Finset.le_sup_dite_neg (fun j => j = i) (Finset.mem_univ j) _
  ¬∑ exact hrN _ <| le_max_iff.2 (Or.inr le_rfl)

/--
Let `v‚ÇÅ, ..., v‚Çñ` be a collection of at least two non-trivial and pairwise inequivalent
absolute values. Then there is `a ‚àà K` such that `1 < v‚ÇÅ a` while `v‚±º a < 1` for
all other `j ‚â† 0`.
-/
theorem exists_one_lt_lt_one {n : ‚Ñï} {v : Fin (n + 2) ‚Üí AbsoluteValue K ‚Ñù}
    (h : ‚àÄ i, ‚àÉ x, 1 < v i x)
    (hv : Pairwise fun i j => ¬¨‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, v i x = (v j x) ^ t) :
    ‚àÉ (a : K), 1 < v 0 a ‚àß ‚àÄ j ‚â† 0, v j a < 1 := by
  induction n using Nat.case_strong_induction_on with
  | hz =>
    let ‚ü®a, ha‚ü© := (v 0).exists_one_lt_lt_one_of_ne_rpow (h 0) (h 1) (hv zero_ne_one)
    exact ‚ü®a, ha.1, by simp [Fin.forall_fin_two]; exact ha.2‚ü©
  | hi n ih =>
    -- Assume the result is true for all smaller collections of absolute values
    -- Let `a : K` be the value from the collection with the last absolute value removed
    let ‚ü®a, ha‚ü© := ih n le_rfl (fun _ => h _) (hv.comp_of_injective <| Fin.castSucc_injective _)
    -- Let `b : K` be the value using then first and last absolute value
    let ‚ü®b, hb‚ü© := ih 0 (by linarith) (fun _ => h _) <| Fin.pairwise_forall_two hv
    simp [Fin.forall_fin_two] at hb
    -- If `v last < 1` then `a` works.
    by_cases ha‚ÇÄ : v (Fin.last _) a < 1
    ¬∑ refine ‚ü®a, ha.1, fun j hj => ?_‚ü©
      by_cases hj' : j = Fin.last (n + 2)
      ¬∑ exact hj' ‚ñ∏ ha‚ÇÄ
      ¬∑ exact ha.2 (Fin.castPred _ (ne_eq _ _ ‚ñ∏  hj')) <| Fin.castPred_ne_zero _ hj
    -- If `v last = 1` then this is given by `exists_one_lt_lt_one_lt_one_of_eq_one` with
    -- `w = v last`.
    ¬∑ by_cases ha‚ÇÅ : v (Fin.last _) a = 1
      ¬∑ let ‚ü®k, hk‚ü© := exists_one_lt_lt_one_lt_one_of_eq_one
          (v := fun i : Fin (n + 2) => v i.castSucc) ha.1 ha.2 ha‚ÇÅ hb.1 hb.2
        refine ‚ü®k, hk.1, fun j hj => ?_‚ü©
        by_cases h : j ‚â† Fin.last (n + 2)
        ¬∑ exact ne_eq _ _ ‚ñ∏ hk.2.1 (j.castPred h) <| Fin.castPred_ne_zero _ hj
        ¬∑ exact not_ne_iff.1 h ‚ñ∏ hk.2.2
      -- The last cast `1 < v last` is given by `exists_one_lt_lt_one_lt_one_of_one_lt` with
      -- `w = v last`.
      ¬∑ let ‚ü®k, hk‚ü© := exists_one_lt_lt_one_lt_one_of_one_lt
          (v := fun i : Fin (n + 2) => v i.castSucc) ha.1 ha.2
            (lt_of_le_of_ne (not_lt.1 ha‚ÇÄ) (ne_eq _ _ ‚ñ∏ ha‚ÇÅ).symm) hb.1 hb.2
        refine ‚ü®k, hk.1, fun j hj => ?_‚ü©
        by_cases h : j ‚â† Fin.last _
        ¬∑ apply ne_eq _ _ ‚ñ∏ hk.2.1 (j.castPred h)
          rwa [‚Üê Fin.castPred_zero, Fin.castPred_inj]
        ¬∑ exact not_ne_iff.1 h ‚ñ∏ hk.2.2

end AbsoluteValue

/-!
## Weak approximation results
-/

namespace NumberField.InfinitePlace

open AbsoluteValue

variable {K : Type*} [Field K] {v : InfinitePlace K} (w : InfinitePlace K)

theorem pos_of_pos {x : K} (hv : 0 < v x) : 0 < w x := by
  rw [coe_apply] at hv ‚ä¢
  exact v.1.pos_of_pos _ hv

variable {w}

/--
If `v` and `w` are infinite places of `K` and `v = w ^ t` for some `t > 0` then `t = 1`.
-/
theorem rpow_eq_one_of_eq_rpow {t : ‚Ñù} (h : ‚àÄ x, v x = (w x) ^ t) : t = 1 := by
  let ‚ü®œàv, hœàv‚ü© := v.2
  let ‚ü®œàw, hœàw‚ü© := w.2
  simp only [coe_apply, ‚Üê hœàv, ‚Üê hœàw] at h
  have := congrArg (Real.logb 2) (h 2)
  simp only [place_apply, map_ofNat, RCLike.norm_ofNat, Nat.one_lt_ofNat, Real.logb_self_eq_one,
    Nat.ofNat_pos, ne_eq, OfNat.ofNat_ne_one, not_false_eq_true, Real.logb_rpow] at this
  exact this.symm

/--
If `v` and `w` are infinite places of `K` and `v = w ^ t`, then `v = w`.
-/
theorem eq_of_eq_rpow (h : ‚àÉ (t : ‚Ñù) (_ : 0 < t), ‚àÄ x, v x = (w x) ^ t) : v = w := by
  let ‚ü®t, _, h‚ü© := h
  simp only [rpow_eq_one_of_eq_rpow h, Real.rpow_one] at h
  exact Subtype.ext <| AbsoluteValue.ext h

variable (v)

/--
Infinite places are represented by non-trivial absolute values.
-/
theorem exists_one_lt : ‚àÉ x, 1 < v x := by
  refine ‚ü®2, let ‚ü®œÜ, hœÜ‚ü© := v.2; ?_‚ü©
  simp only [coe_apply, ‚Üê hœÜ, place_apply, map_ofNat, RCLike.norm_ofNat, Nat.one_lt_ofNat]

variable {v}

open Filter in
/--
Let `v` be an infinite place and `c ‚àà K` such that `1 < v c`. Suppose that `w c < 1` for any
other infinite place `w ‚â† v`. Then we can find a sequence in `K` that tends to `1` with respect
to `v` and tends to `0` with respect to all other `w ‚â† v`.

Such a sequence is given by `1 / (1 + c ^ (-n))`.
-/
theorem exists_tendsto_one_tendsto_zero {v : InfinitePlace K} {c : K} (hv : 1 < v c)
    (h : ‚àÄ w : InfinitePlace K, w ‚â† v ‚Üí w c < 1) :
    ‚àÉ a : ‚Ñï ‚Üí K,
      Tendsto (Œ≤ := WithAbs v.1) a atTop (ùìù 1) ‚àß (‚àÄ w, w ‚â† v ‚Üí
        Tendsto (Œ≤ := WithAbs w.1) a atTop (ùìù 0)) := by
  refine ‚ü®fun n => 1 / (1 + c‚Åª¬π ^ n), ?_, ?_‚ü©
  ¬∑ have hx‚ÇÅ := map_inv‚ÇÄ v _ ‚ñ∏ inv_lt_one_of_one_lt‚ÇÄ hv
    nth_rw 3 [show (1 : WithAbs v.1) = 1 / 1 by norm_num]
    apply Filter.Tendsto.div tendsto_const_nhds _ one_ne_zero
    nth_rw 2 [‚Üê add_zero (1 : WithAbs v.1)]
    apply Filter.Tendsto.const_add
    rw [tendsto_zero_iff_norm_tendsto_zero]
    simp_rw [norm_pow]
    apply tendsto_pow_atTop_nhds_zero_of_lt_one (AbsoluteValue.nonneg _ _) hx‚ÇÅ
  ¬∑ intro w hwv
    simp_rw [div_eq_mul_inv, one_mul]
    rw [tendsto_zero_iff_norm_tendsto_zero]
    simp_rw [norm_inv]
    apply Filter.Tendsto.inv_tendsto_atTop
    have (a : WithAbs w.1) (n : ‚Ñï) : ‚Äña ^ n‚Äñ - 1 ‚â§  ‚Äñ1 + a ^ n‚Äñ  := by
      simp_rw [add_comm, ‚Üê norm_one (Œ± := WithAbs w.1), tsub_le_iff_right]
      exact norm_le_add_norm_add _ _
    apply Filter.tendsto_atTop_mono (this _)
    apply Filter.tendsto_atTop_add_right_of_le _ (-1) _ (fun _ => le_rfl)
    simp only [inv_pow, norm_inv, norm_pow]
    refine tendsto_atTop_of_geom_le (c := w c‚Åª¬π) ?_ ?_ (fun n => ?_)
    ¬∑ simp only [pow_zero, inv_one, zero_lt_one]
    ¬∑ exact map_inv‚ÇÄ w _ ‚ñ∏ (one_lt_inv‚ÇÄ (pos_of_pos w (by linarith))).2 (h w hwv)
    ¬∑ rw [map_inv‚ÇÄ, ‚Üê inv_pow, ‚Üê inv_pow, pow_add, pow_one, mul_comm]
      exact le_rfl

/--
Suppose that there are at least two infinite places of `K`. Let `v` be one of them.
Then we can find an `x ‚àà K` such that `1 < v x`, while `w x < 1` for all other `w ‚â† v`.

This element is obtained by applying the analogous result for collections of non-equivalent
and non-trivial absolute values `AbsoluteValue.exists_one_lt_lt_one`.
-/
theorem exists_one_lt_lt_one [NumberField K] (h : 1 < Fintype.card (InfinitePlace K)) :
    ‚àÉ (x : K), 1 < v x ‚àß ‚àÄ w ‚â† v, w x < 1 := by
  let ‚ü®n, ‚ü®e‚ü©‚ü© := Finite.exists_equiv_fin (InfinitePlace K)
  have : 1 < n := by linarith [Fintype.card_fin n ‚ñ∏ Fintype.card_eq.2 ‚ü®e‚ü©]
  obtain ‚ü®k, rfl‚ü© := Nat.exists_eq_add_of_le' this
  let ‚ü®m, hm‚ü© := e.symm.surjective v
  let e‚ÇÄ := e.trans (Equiv.swap 0 m)
  let ‚ü®x, hx‚ü© := AbsoluteValue.exists_one_lt_lt_one (fun i => (e‚ÇÄ.symm i).exists_one_lt)
      (fun i j hj => mt eq_of_eq_rpow <| e‚ÇÄ.symm.injective.ne hj)
  refine ‚ü®x, hm ‚ñ∏ hx.1, fun w hw => ?_‚ü©
  have he‚ÇÄ : e‚ÇÄ v = 0 := by simp [e‚ÇÄ, e.symm_apply_eq.1 hm]
  exact e‚ÇÄ.symm_apply_apply _ ‚ñ∏ hx.2 (e‚ÇÄ w) <| he‚ÇÄ ‚ñ∏ e‚ÇÄ.injective.ne hw

variable (K)

open Filter in
/--
*Weak approximation for infinite places*: this is the result that `K` is dense in `Œ† v, K`, where
`v` ranges over all infinite places of `K` and at the `v`th place we consider `K` to have the
topology of `v`. In other words, for any collection `(x·µ•)·µ•`, with `x·µ• ‚àà K` there is a `y ‚àà K`
such that each `|y - x·µ•|·µ•` is arbitrarily small.
-/
theorem denseRange_algebraMap_pi [NumberField K] :
    DenseRange <| algebraMap K ((v : InfinitePlace K) ‚Üí WithAbs v.1) := by
  by_cases hcard : Fintype.card (InfinitePlace K) = 1
  ¬∑ -- If there is only one infinite place this is the identity map
    letI := Fintype.equivFinOfCardEq hcard |>.unique
    let f := Homeomorph.funUnique (InfinitePlace K) (WithAbs this.default.1)
    convert DenseRange.comp f.symm.surjective.denseRange denseRange_id f.continuous_invFun <;>
    exact this.uniq _
  -- We have to show that for some `(z·µ•)·µ•` there is a `y` in `K` that is arbitrarily close to `z`
  -- under the embedding `y ‚Ü¶ (y)·µ•`
  refine Metric.denseRange_iff.2 fun z r hr => ?_
  -- For some `v`, by previous results we can select a sequence `x·µ• ‚Üí 1` in `v`'s topology
  -- and `‚Üí 0` in any other infinite place topology
  have (v : InfinitePlace K) : ‚àÉ (x : ‚Ñï ‚Üí WithAbs v.1),
      Tendsto (fun n => x n) atTop (ùìù 1) ‚àß ‚àÄ w ‚â† v,
        Tendsto (Œ≤ := WithAbs w.1) (fun n => x n) atTop (ùìù 0) := by
    haveI : 0 < Fintype.card (InfinitePlace K) := Fintype.card_pos
    let ‚ü®_, hx‚ü© := v.exists_one_lt_lt_one (by omega)
    exact exists_tendsto_one_tendsto_zero hx.1 hx.2
  choose x h using this
  -- Define the sequence `y = ‚àë v, x·µ• * z·µ•` in `K`
  let y := fun n => ‚àë v, x v n * z v
  -- At each place `w` the limit of `y` with respect to `w`'s topology is `z w`.
  have : Tendsto (fun n w => ((‚àë v, x v n * z v) : WithAbs w.1)) atTop (ùìù z) := by
    refine tendsto_pi_nhds.2 fun w => ?_
    simp_rw [‚Üê Finset.sum_ite_eq_of_mem _ _ _ (Finset.mem_univ w)]
    -- In `w`'s topology we have that `x v n * z v ‚Üí z v`  if `v = w` else `‚Üí 0`
    refine tendsto_finset_sum _ fun v _ => ?_
    by_cases hw : w = v
    ¬∑ -- because `x w ‚Üí 1` in `w`'s topology
      simp only [hw, if_true, ‚Üê congrArg (Œ≤ := ‚Ñï ‚Üí K) x hw, ‚Üê congrArg z hw]
      nth_rw 2 [‚Üê one_mul (z w)]
      exact Tendsto.mul_const _ (h w).1
    ¬∑ -- while `x v ‚Üí 0` in `w`'s topology (v ‚â† w)
      simp only [hw, if_false]
      rw [‚Üê zero_mul (z v)]
      exact Filter.Tendsto.mul_const _ <| (h v).2 w hw
  simp_rw [Metric.tendsto_atTop] at this
  let ‚ü®N, h‚ü© := this r hr
  exact ‚ü®y N, dist_comm z (algebraMap K _ (y N)) ‚ñ∏ h N le_rfl‚ü©

end InfinitePlace

namespace InfiniteAdeleRing

variable (K : Type*) [Field K] {v w : InfinitePlace K}

/--
*Weak approximation for the infinite adele ring*: this is the result that `K` is dense in `Œ† v, K·µ•`,
where `v` ranges over all infinite places of `K`. In other words, for any collection `(x·µ•)·µ•`,
with `x·µ• ‚àà K·µ•` there is a `y ‚àà K` such that each `|y - x·µ•|·µ•` is arbitrarily small.
-/
theorem denseRange_algebraMap [NumberField K] :
    DenseRange <| algebraMap K (InfiniteAdeleRing K) := by
  apply DenseRange.comp (DenseRange.piMap (fun _ => UniformSpace.Completion.denseRange_coe))
    (InfinitePlace.denseRange_algebraMap_pi K)
    <| Continuous.piMap (fun _ => UniformSpace.Completion.continuous_coe _)

end InfiniteAdeleRing

namespace InfinitePlace.Completion

variable (K : Type*) [Field K] {v w : InfinitePlace K}

/--
*Weak approximation for subcollections*: this is the result that `K` is dense in any subcollection
`Œ† v ‚àà S, K·µ•` of completions at infinite places.
-/
theorem denseRange_algebraMap_subtype_pi (p : InfinitePlace K ‚Üí Prop) [NumberField K] :
    DenseRange <| algebraMap K ((v : Subtype p) ‚Üí v.1.Completion) := by
  apply DenseRange.comp (g := Subtype.restrict p)
    (f := algebraMap K ((v : InfinitePlace K) ‚Üí v.1.Completion))
  ¬∑ exact Subtype.surjective_restrict (Œ≤ := fun v => v.1.Completion) p |>.denseRange
  ¬∑ exact InfiniteAdeleRing.denseRange_algebraMap K
  ¬∑ exact continuous_pi (fun _ => continuous_apply _)

end NumberField.InfinitePlace.Completion
